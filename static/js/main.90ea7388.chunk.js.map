{"version":3,"sources":["state/colorSlice.ts","state/hexGridSlice.ts","store.ts","hooks.ts","components/Cell.tsx","components/Grid.tsx","soundManager.ts","components/SoundInterface.tsx","components/ColorCycler.tsx","components/ColorChangeHandler.tsx","components/DragGuideIcon.tsx","components/App.tsx","index.tsx"],"names":["colorSlice","createSlice","name","initialState","hue","saturation","lightness","reducers","adjustHue","state","action","newHue","payload","adjustSaturation","Math","min","max","adjustLightness","actions","getHexFactory","baseHexSize","extendHex","orientation","size","offset","getCornerPointsString","hexFactory","corners","map","x","y","join","getStateForScreen","document","documentElement","style","setProperty","window","innerHeight","screenWidth","innerWidth","clientWidth","screenHeight","clientHeight","minDimension","cellHeight","sqrt","cellWidth","cellColumns","floor","cellRows","centerCoord","centerCoordCube","cube","colorScaling","screenDimensions","height","width","gridDimensions","cellDimensions","cellPointsString","hexGridSlice","resize","newState","store","configureStore","reducer","color","colorReducer","hexGrid","hexGridReducer","scaleNumericValue","fromValue","fromRange","toRange","scalingFactor","valueInRange","clamp","value","minimum","maximum","useAppDispatch","useDispatch","useAppSelector","useSelector","Cell","props","pointString","baseHue","baseSaturation","baseLightness","scaledHue","useMemo","hex","q","scaledSaturation","s","scaledLightness","r","scaledColorString","stroke","strokeWidth","strokeOpacity","equals","toPoint","transform","points","fill","Grid","cellHexes","gridHexes","defineGrid","rectangle","centerIndex","indexOf","centerHex","splice","push","selectGridHexes","cellElements","hexToKey","centerHexPoint","length","verticalOffset","position","left","top","overflow","userSelect","MajorTriadSemitones","MinorTriadSemitones","DiminishedTriadSemitones","DominantSeventhSemitones","MajorSeventhSemitones","MinorSeventhSemitones","DefaultSemitones","ChordTones","ChordProgressions","AllProgressions","Object","keys","createOscillators","context","semitones","undefined","square","OscillatorNode","type","sawtooth","sine","frequency","setValueAtTime","currentTime","detune","createOscillatorGains","oscillators","GainNode","gain","connect","createOscillatorsMixer","oscillatorGains","merger","ChannelMergerNode","numberOfInputs","channelCount","createOscillatorStructure","oscillatorsMixer","output","assignWaveformTable","wavetableJson","Array","isArray","wave","PeriodicWave","real","imag","chains","chain","setPeriodicWave","assignWaveformDetune","atTime","cancelSchedules","cancelScheduledValues","setWetDryBalance","wetNode","dryNode","wetGain","SoundManager","structureInitialized","audioContext","rootFrequencyChain","thirdFrequencyChain","fifthFrequencyChain","seventhFrequencyChain","startStopGainNode","lfoChain","reverbChain","lfoFrequency","lfoGain","reverbGain","overallVolumeGainNode","overallVolumeGain","isChordProgressionEnabled","nextChordProgressionEndTime","chordDurationSeconds","this","AudioContext","chainsMixer","oscillator","oscillatorGain","constantSource","ConstantSourceNode","constantGain","gainMixer","lfoOutput","createLfoStructure","input","reverbConvolver","ConvolverNode","dryGain","reverbOutput","createReverbStructure","destination","fetch","process","then","response","json","tableJson","catch","reason","console","error","arrayBuffer","buffer","decodeAudioData","audioData","SCALE_UP","SCALE_DOWN","PURE_GREEN","PURE_BLUE","PURE_RED_WRAP","redSquareComponent","blueSineComponent","greenSawComponent","assignWaveformGains","chordGains","semitoneDistance","assignWaveformFrequency","pow","CHORD_DECAY_SEC","REST_SEC","setTimeout","queueChordProgression","LOOKAHEAD_SEC","progressionIndex","random","progressionName","chordsList","concat","chord","linearRampToValueAtTime","rootSemitones","chordTones","setTargetAtTime","initializeAudioStructure","cascadeHueToAudioNodes","cascadeLightnessToAudioNodes","cascadeSaturationToAudioNodes","start","startOscillators","resume","suspend","volume","intensity","isEnabled","durationSeconds","SoundInterface","mainHue","mainSaturation","mainLightness","soundManager","useRef","useState","isInterfaceExpanded","setInterfaceExpanded","isPlaying","setIsPlaying","currentVolume","setCurrentVolume","currentReverbIntensity","setCurrentReverbIntensity","currentLfoIntensity","setCurrentLfoIntensity","currentLfoFrequency","setCurrentLfoFrequency","setChordProgressionEnabled","currentChordDuration","setChordDuration","useEffect","current","changeHue","changeSaturation","changeLightness","panInterceptor","event","stopPropagation","id","onMouseDown","onTouchStart","className","onClick","pause","play","preventDefault","href","htmlFor","step","onInput","wholeVolume","parseInt","target","changeVolume","wholeIntensity","changeReverbIntensity","changeLfoIntensity","wholeFrequency","changeLfoFrequency","newStatus","changeChordProgression","chordDuration","parseFloat","changeChordDuration","ColorCycler","dispatch","isCycling","setIsCycling","dispatchInterval","setInterval","timeSegment","Date","now","PI","saturationMovement","round","cos","clearInterval","ColorChangeHandler","previousIconHue","previousIconSaturation","previousIconLightness","colorString","querySelector","setAttribute","abs","canvasElem","createElement","ctx","getContext","alpha","desynchronized","region","Path2D","moveTo","lineTo","closePath","fillStyle","iconUrl","toDataURL","remove","DragGuideIcon","hueStepScaling","viewBox","d","x1","y1","x2","y2","gradientTransform","App","isPanning","setIsPanning","lastPannedClientX","lastPannedClientY","handleResize","addEventListener","removeEventListener","handleKey","code","handlePanStart","currentClientX","currentClientY","touchEvent","touches","clientX","clientY","mouseEvent","handlePanMove","isTouchEvent","distanceX","distanceY","distanceTotal","angle","atan2","navigator","vibrate","handlePanEnd","ReactDOM","render","StrictMode","getElementById"],"mappings":"+QAyBaA,EAAaC,YAAY,CACpCC,KAAM,QACNC,aAR+B,CAC/BC,IAAK,IACLC,WAAY,GACZC,UAAW,IAMXC,SAAU,CACRC,UAAW,SAACC,EAAOC,GACjB,IAAIC,EAAUF,EAAML,IAAOM,EAAOE,QAAU,IAExCD,EAAS,EACXA,GAAU,IAEHA,EAAS,MAChBA,GAAU,KAGZF,EAAML,IAAMO,GAEdE,iBAAkB,SAACJ,EAAOC,GACxBD,EAAMJ,WAAaS,KAAKC,IAAI,IAAKD,KAAKE,IAAI,EAAGP,EAAMJ,WAAaK,EAAOE,WAEzEK,gBAAiB,SAACR,EAAOC,GACvBD,EAAMH,UAAYQ,KAAKC,IAAI,IAAKD,KAAKE,IAAI,EAAGP,EAAMH,UAAYI,EAAOE,cAKpE,EAAyDZ,EAAWkB,QAC5DlB,GADR,EAAQQ,UAAR,EAAmBK,iBAAnB,EAAqCI,gBAC7BjB,EAAf,S,QCoCA,SAASmB,EAAcC,GACrB,OAAOC,YAAU,CACfC,YAAa,OACbC,KAAMH,EACNI,QAAS,IAUb,SAASC,EAAsBC,GAC7B,OAAOA,IACJC,UACAC,KAAI,gBAAEC,EAAF,EAAEA,EAAGC,EAAL,EAAKA,EAAL,gBAAeD,EAAf,aAAqBC,MACzBC,KAAK,KAMV,SAASC,IAGPC,SAASC,gBAAgBC,MAAMC,YAAY,OAA3C,UAA2E,IAArBC,OAAOC,YAA7D,OAGA,IAAMC,EAAcF,OAAOG,YAAcP,SAASC,gBAAgBO,YAC5DC,EAAeL,OAAOC,aAAeL,SAASC,gBAAgBS,aAC9DC,EAAe9B,KAAKC,IAAIwB,EAAaG,GAGvCtB,EAAc,GAEdwB,GAAgB,IAClBxB,EAAc,GAEPwB,GAAgB,IACvBxB,EAAc,GAEPwB,GAAgB,OACvBxB,EAAc,IAIhB,IAAMM,EAAaP,EAAcC,GAM3ByB,EAAazB,EAAcN,KAAKgC,KAAK,GACrCC,EAA0B,EAAd3B,EACZ4B,EAAclC,KAAKmC,MAAMV,GAA2B,IAAZQ,IAAqB,EAC7DG,EAAWpC,KAAKmC,MAAMP,EAAeG,GAAc,EAGnDM,EAAyB,CAC7BtB,EAAGf,KAAKmC,MAAMD,EAAc,GAC5BlB,EAAGhB,KAAKmC,MAAMC,EAAW,IAGrBE,EAAkB1B,EAAWyB,GAAaE,OAG1CC,EAA6B,CACjClD,IAAK,EACLE,UAAW,EACXD,WAAY,GAuCd,OAnCI6C,GAAY,GAAKF,GAAe,KAClCM,EAAalD,KAAO,IACpBkD,EAAahD,WAAa,KAIxB4C,GAAY,IACdI,EAAajD,YAAc,KAID,CAC1BkD,iBAAkB,CAChBC,OAAQd,EACRe,MAAOlB,GAETmB,eAAgB,CACdF,OAAQN,EACRO,MAAOT,GAETW,eAAgB,CACdH,OAAQX,EACRY,MAAOV,GAETa,iBAAkBnC,EAAsBC,GACxCN,cACA+B,cACAC,kBACAE,gBAUG,IAAMO,EAAe5D,YAAY,CACtCC,KAAM,UACNC,aAAc6B,IACdzB,SAAU,CACRuD,OAAQ,SAACrD,GACP,IAAMsD,EAAW/B,IAEjBvB,EAAM8C,iBAAmBQ,EAASR,iBAClC9C,EAAMiD,eAAiBK,EAASL,eAChCjD,EAAMkD,eAAiBI,EAASJ,eAChClD,EAAMmD,iBAAmBG,EAASH,iBAClCnD,EAAM0C,YAAcY,EAASZ,YAC7B1C,EAAMW,YAAc2C,EAAS3C,gBAMpByC,GADWA,EAAa3C,QAAxB4C,OACAD,EAAf,SC9MeG,EAPDC,YAAe,CAC3BC,QAAS,CACPC,MAAOC,EACPC,QAASC,KAeN,SAASC,EAAkBC,EAAmBC,EAA6BC,GAChF,IAAMC,GAAiBD,EAAQ,GAAKA,EAAQ,KAAOD,EAAU,GAAKA,EAAU,IACtEG,EAAe9D,KAAKC,IAAI0D,EAAU,GAAI3D,KAAKE,IAAIyD,EAAU,GAAID,IAAcC,EAAU,GAE3F,OAAOC,EAAQ,GAAME,EAAeD,EAU/B,SAASE,EAAMC,EAAeC,EAAiBC,GACpD,OAAOlE,KAAKE,IAAI+D,EAASjE,KAAKC,IAAIiE,EAASF,I,iBCnChCG,EAAiB,kBAAMC,eACvBC,EAAkDC,I,eC6EhDC,MA3Ef,SAAcC,GAGZ,IAAMnC,EAAcgC,GAAe,SAAC1E,GAAD,OAAWA,EAAM4D,QAAQlB,eACtDC,EAAkB+B,GAAe,SAAC1E,GAAD,OAAWA,EAAM4D,QAAQjB,mBAC1DmC,EAAcJ,GAAe,SAAC1E,GAAD,OAAWA,EAAM4D,QAAQT,oBACtDN,EAAe6B,GAAe,SAAC1E,GAAD,OAAYA,EAAM4D,QAAQf,gBACxDkC,EAAUL,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM/D,OAChDqF,EAAiBN,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM9D,cACvDqF,EAAgBP,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM7D,aAGtDqF,EAAYC,mBAAQ,WAExB,OAAOJ,EAAWlC,EAAalD,KAAOkF,EAAMO,IAAIC,EAAI1C,EAAgB0C,KACnE,CAACN,EAASlC,EAAcF,EAAiBkC,EAAMO,MAG5CE,EAAmBH,mBAAQ,WAC/B,OAAOf,EAAMY,EAAkBnC,EAAajD,YAAciF,EAAMO,IAAIG,EAAI5C,EAAgB4C,GAAK,EAAG,OAC/F,CAACP,EAAgBnC,EAAcF,EAAiBkC,EAAMO,MAGnDI,EAAkBL,mBAAQ,WAC9B,OAAOf,EAAMa,EAAiBpC,EAAahD,WAAagF,EAAMO,IAAIK,EAAI9C,EAAgB8C,GAAK,EAAG,OAC7F,CAACR,EAAepC,EAAcF,EAAiBkC,EAAMO,MAElDM,EAAoBP,mBAAQ,WAChC,MAAM,OAAN,OAAcD,EAAd,aAA4BI,EAA5B,cAAkDE,EAAlD,QACC,CAACN,EAAWI,EAAkBE,IAE7BG,EAASD,EAGTE,EAAc,EACdC,EAAgB,IAEhBhB,EAAMO,IAAIU,OAAOpD,KACnBkD,EAAc,EACdC,EAAgB,GAChBF,EAAS,SAIX,MAAed,EAAMO,IAAIW,UAAlB3E,EAAP,EAAOA,EAAGC,EAAV,EAAUA,EACJ2E,EAAS,oBAAgB5E,EAAhB,aAAsBC,EAAtB,KAEf,OACE,mBACE2E,UAAWA,EADb,SAGE,yBACEC,OAAQnB,EACRoB,KAAMR,EACNC,OAAQA,EACRE,cAAeA,EACfD,YAAaA,OCINO,MAhDf,WACE,IAAMrD,EAAmB4B,GAAe,SAAC1E,GAAD,OAAWA,EAAM4D,QAAQd,oBAC3DG,EAAiByB,GAAe,SAAC1E,GAAD,OAAWA,EAAM4D,QAAQX,kBACzDC,EAAiBwB,GAAe,SAAC1E,GAAD,OAAWA,EAAM4D,QAAQV,kBACzDR,EAAcgC,GAAe,SAAC1E,GAAD,OAAWA,EAAM4D,QAAQlB,eACtD/B,EAAc+D,GAAe,SAAC1E,GAAD,OAAWA,EAAM4D,QAAQjD,eAGtDyF,EAAYjB,mBAChB,WACE,OJuMyB,SAAClC,EAAsBP,EAAwB/B,GAE5E,IAAMM,EAAaP,EAAcC,GAK3B0F,EAHcC,YAAWrF,GAGDsF,UAAU,CACtCvD,MAAOC,EAAeD,MACtBD,OAAQE,EAAeF,SAInByD,EAAcH,EAAUI,QAAQ/D,GAEtC,IAAqB,IAAjB8D,EAAoB,CACtB,IAAME,EAAYL,EAAUM,OAAOH,EAAa,GAAG,GACnDH,EAAUO,KAAKF,GAGjB,OAAOL,EI3NIQ,CAAgB5D,EAAgBP,EAAa/B,KAEtD,CAACsC,EAAgBP,EAAa/B,IAE1BmG,EAAe3B,mBACnB,WACE,OAAOiB,EAAUjF,KAAI,SAACiE,GAClB,OAAO,cAAC,EAAD,CAELA,IAAKA,GAxBhB,SAAkBA,GAEjB,MAAM,GAAN,OAAUA,EAAIC,EAAd,YAAmBD,EAAIK,EAAvB,YAA4BL,EAAIG,GAqBjBwB,CAAS3B,SAKtB,CAACgB,IAIGY,EAAiBZ,EAAUA,EAAUa,OAAS,GAAGlB,UACnDmB,EAAkBpE,EAAiBC,OAAS,EAAKiE,EAAe3F,EAAK6B,EAAeH,OAAS,EAG3FrB,EAA6B,CACjCyF,SAAU,WACVC,KAJsBtE,EAAiBE,MAAQ,EAAKgE,EAAe5F,EAAK8B,EAAeF,MAAQ,EAK/FqE,IAAKH,EACLI,SAAU,UACVC,WAAY,QAGd,OACE,qBACE7F,MAAOA,EADT,SAGGoF,K,gCCzDDU,EAAsC,CAAC,EAAG,EAAG,EAAG,GAChDC,EAAsC,CAAC,EAAG,EAAG,EAAG,GAEhDC,EAA2C,CAAC,EAAG,EAAG,EAAG,GAErDC,EAA2C,CAAC,EAAG,EAAG,EAAG,IACrDC,EAAwC,CAAC,EAAG,EAAG,EAAG,IAClDC,EAAwC,CAAC,EAAG,EAAG,EAAG,IAIlDC,EAAmCN,EAenCO,EAA8D,CAElE,QAAY,CAAC,EAAKP,GAClB,SAAY,CAAC,EAAKC,GAClB,UAAY,CAAC,EAAKA,GAClB,SAAY,CAAC,EAAKD,GAClB,QAAY,CAAC,EAAKA,GAClB,SAAY,CAAC,EAAKC,GAClB,UAAY,CAAC,GAAKC,GAElB,QAAY,CAAC,EAAKD,GAClB,SAAY,CAAC,EAAKC,GAClB,WAAY,CAAC,EApCiC,CAAC,EAAG,EAAG,EAAG,IAqCxD,SAAY,CAAC,EAAKD,GAClB,UAAY,CAAC,EAAKD,GAClB,WAAY,CAAC,GAAKA,GAClB,UAAY,CAAC,EAAKA,GAElB,GAAY,CAAC,EAAKG,GAClB,IAAY,CAAC,EAAKA,GAClB,KAAY,CAAC,EAAKA,GAClB,IAAY,CAAC,EAAKA,GAClB,GAAY,CAAC,EAAKA,GAClB,IAAY,CAAC,EAAKA,GAClB,KAAY,CAAC,GAAKA,GAElB,SAAY,CAAC,EAAKC,GAClB,UAAY,CAAC,EAAKA,GAClB,WAAY,CAAC,EAAKA,GAClB,UAAY,CAAC,EAAKA,GAClB,SAAY,CAAC,EAAKA,GAClB,UAAY,CAAC,EAAKA,GAClB,WAAY,CAAC,GAAKA,GAElB,SAAY,CAAC,EAAKC,GAClB,UAAY,CAAC,EAAKA,GAClB,WAAY,CAAC,EAAKA,GAClB,UAAY,CAAC,EAAKA,GAClB,SAAY,CAAC,EAAKA,GAClB,UAAY,CAAC,EAAKA,GAClB,WAAY,CAAC,GAAKA,IAMdG,EAAiD,CACrD,YAAa,CAAC,QAAS,QAAS,SAAU,UAC1C,YAAa,CAAC,QAAS,SAAU,SAAU,SAC3C,YAAa,CAAC,SAAU,SAAU,QAAS,SAC3C,YAAa,CAAC,SAAU,QAAS,QAAS,UAC1C,YAAa,CAAC,QAAS,QAAS,WAAY,UAC5C,YAAa,CAAC,QAAS,SAAU,WAAY,UAC7C,QAAW,CAAC,QAAS,SAAU,SAAU,SACzC,OAAU,CAAC,SAAU,SAAU,QAAS,SACxC,gBAAiB,CAAC,QAAS,QAAS,UACpC,gBAAiB,CAAC,QAAS,QAAS,SAAU,SAC9C,gBAAiB,CAAC,QAAS,SAAU,SACrC,gBAAiB,CAAC,QAAS,SAAU,SACrC,gBAAiB,CAAC,QAAS,SAAU,SACrC,UAAa,CAAC,QAAS,QAAS,SAAU,UAAW,SAAU,QAAS,SAAU,SAClF,MAAS,CAAC,UAAW,KAAM,WAAY,UACvC,iBAAkB,CAAC,UAAW,KAAM,WAAY,SAAU,UAAW,KAAM,SAC3E,UAAa,CAAC,KAAM,MAAO,UAAW,OAGlCC,EAA4BC,OAAOC,KAAKH,GAgG9C,SAASI,EAAkBC,GAAkG,IAA3EC,EAA0E,4DAA1CC,EAC1EC,EAAS,IAAIC,eAAeJ,EAAS,CAAEK,KAAM,WAC7CC,EAAW,IAAIF,eAAeJ,EAAS,CAAEK,KAAM,aAC/CE,EAAO,IAAIH,eAAeJ,EAAS,CAAEK,KAAM,SAYjD,OAVAF,EAAOK,UAAUC,eAAe,IAAKT,EAAQU,aAC7CJ,EAASE,UAAUC,eAAe,IAAKT,EAAQU,aAC/CH,EAAKC,UAAUC,eAAe,IAAKT,EAAQU,kBAEzBR,IAAdD,GAAyC,IAAdA,IAC7BE,EAAOQ,OAAOF,eAAe,IAAMR,EAAWD,EAAQU,aACtDJ,EAASK,OAAOF,eAAe,IAAMR,EAAWD,EAAQU,aACxDH,EAAKI,OAAOF,eAAe,IAAMR,EAAWD,EAAQU,cAG/C,CACLP,SACAG,WACAC,QAUJ,SAASK,EAAsBZ,EAAuBa,GACpD,IAAMV,EAAS,IAAIW,SAASd,GACtBM,EAAW,IAAIQ,SAASd,GACxBO,EAAO,IAAIO,SAASd,GAY1B,OATAG,EAAOY,KAAKN,eAAe,EAAGT,EAAQU,aACtCJ,EAASS,KAAKN,eAAe,EAAGT,EAAQU,aACxCH,EAAKQ,KAAKN,eAAe,EAAGT,EAAQU,aAGpCG,EAAYV,OAAOa,QAAQb,GAC3BU,EAAYP,SAASU,QAAQV,GAC7BO,EAAYN,KAAKS,QAAQT,GAElB,CACLJ,SACAG,WACAC,QAUJ,SAASU,EAAuBjB,EAAuBkB,GACrD,IAAMC,EAAS,IAAIC,kBAAkBpB,EAAS,CAAEqB,eAAgB,EAAGC,aAAc,IAOjF,OAJAJ,EAAgBf,OAAOa,QAAQG,GAC/BD,EAAgBZ,SAASU,QAAQG,GACjCD,EAAgBX,KAAKS,QAAQG,GAEtBA,EAST,SAASI,EAA0BvB,GAA6F,IAAtEC,EAAqE,4DAArCC,EAClFW,EAAcd,EAAkBC,EAASC,GACzCiB,EAAkBN,EAAsBZ,EAASa,GACjDW,EAAmBP,EAAuBjB,EAASkB,GAEnDO,EAAS,IAAIX,SAASd,GAG5B,OAFAwB,EAAiBR,QAAQS,GAElB,CACLZ,cACAK,kBACAO,UA2GJ,SAASC,EAAoB1B,EAA8B2B,EAAoBtB,GAE7E,GAAgB,OAAZL,GAKC2B,GAAkBC,MAAMC,QAAQF,EAAa,OAAcC,MAAMC,QAAQF,EAAa,MAA3F,CAPyK,IAYzK,IAAMG,EAAO,IAAIC,aAAa/B,EAAS,CAAEgC,KAAML,EAAa,KAAUM,KAAMN,EAAa,OAZgF,mBAAnDO,EAAmD,iCAAnDA,EAAmD,kBAczK,cAAkBA,EAAlB,eAA0B,CAArB,IAAIC,EAAK,KAEZ,GAAc,OAAVA,EAIJ,OAAQ9B,GACN,IAAK,SACH8B,EAAMtB,YAAYV,OAAOiC,gBAAgBN,GACzC,MAEF,IAAK,WACHK,EAAMtB,YAAYP,SAAS8B,gBAAgBN,GAC3C,MAEF,IAAK,OACHK,EAAMtB,YAAYN,KAAK6B,gBAAgBN,MAwC/C,SAASO,EAAqB1B,EAAgB2B,EAAgBC,GAAiF,IAAD,uBAAnDL,EAAmD,iCAAnDA,EAAmD,kBAC5I,cAAkBA,EAAlB,eAA0B,CAArB,IAAIC,EAAK,KAEE,OAAVA,IAKAI,IACFJ,EAAMtB,YAAYV,OAAOQ,OAAO6B,sBAAsBF,GACtDH,EAAMtB,YAAYP,SAASK,OAAO6B,sBAAsBF,GACxDH,EAAMtB,YAAYN,KAAKI,OAAO6B,sBAAsBF,IAGtDH,EAAMtB,YAAYV,OAAOQ,OAAOF,eAAeE,EAAQ2B,GACvDH,EAAMtB,YAAYP,SAASK,OAAOF,eAAeE,EAAQ2B,GACzDH,EAAMtB,YAAYN,KAAKI,OAAOF,eAAeE,EAAQ2B,KAgCzD,SAASG,EAAiBC,EAAmBC,EAAmBC,EAAiBN,GAC/EI,EAAQ3B,KAAKN,eAAemC,EAASN,GACrCK,EAAQ5B,KAAKN,eAAe,EAAMmC,EAASN,GAMtC,IAAMO,EAAb,WAQE,WACUvL,EACAC,EACAC,GACR,yBAHQF,MAGR,KAFQC,aAER,KADQC,YACR,KAOMsL,sBAAgC,EAPtC,KAYMC,aAAoC,KAZ1C,KAiBMC,mBAAsD,KAjB5D,KAsBMC,oBAAuD,KAtB7D,KA2BMC,oBAAuD,KA3B7D,KAgCMC,sBAAyD,KAhC/D,KAsCMC,kBAAqC,KAtC3C,KA2CMC,SAA4B,KA3ClC,KAgDMC,YAAkC,KAhDxC,KAqDMC,aAAuB,GArD7B,KA2DMC,QAAkB,IA3DxB,KAiEOC,WAAqB,EAjE5B,KAsEMC,sBAAyC,KAtE/C,KA2EMC,kBAA4B,GA3ElC,KAgFKC,2BAAqC,EAhF1C,KAqFMC,4BAAsC,EArF5C,KA0FMC,qBAAuB,EAtGjC,4DA4GE,WAA0C,IAAD,OAEvC,IAAIC,KAAKjB,qBAAT,CAI0B,OAAtBiB,KAAKhB,eACPgB,KAAKhB,aAAe,IAAIiB,cAI1BD,KAAKf,mBAAqBzB,EAA0BwC,KAAKhB,aAActD,EAAiB,IACxFsE,KAAKd,oBAAsB1B,EAA0BwC,KAAKhB,aAActD,EAAiB,IACzFsE,KAAKb,oBAAsB3B,EAA0BwC,KAAKhB,aAActD,EAAiB,IACzFsE,KAAKZ,sBAAwB5B,EAA0BwC,KAAKhB,aAActD,EAAiB,IAG3F,IAAMwE,EAAc,IAAI7C,kBAAkB2C,KAAKhB,aAAc,CAAE1B,eAAgB,EAAGC,aAAc,IAChGyC,KAAKf,mBAAmBvB,OAAOT,QAAQiD,GACvCF,KAAKd,oBAAoBxB,OAAOT,QAAQiD,GACxCF,KAAKb,oBAAoBzB,OAAOT,QAAQiD,GACxCF,KAAKZ,sBAAsB1B,OAAOT,QAAQiD,GAG1CF,KAAKX,kBAAoB,IAAItC,SAASiD,KAAKhB,cAC3CkB,EAAYjD,QAAQ+C,KAAKX,mBAGzBW,KAAKV,SAtWT,SAA4BrD,EAAuBQ,EAAmBO,GAEpE,IAAMmD,EAAa,IAAI9D,eAAeJ,EAAS,CAAEK,KAAM,SACvD6D,EAAW1D,UAAUC,eAAeD,EAAWR,EAAQU,aAGvD,IAAMyD,EAAiB,IAAIrD,SAASd,GACpCkE,EAAWlD,QAAQmD,GAGnB,IAAMC,EAAiB,IAAIC,mBAAmBrE,GACxCsE,EAAe,IAAIxD,SAASd,GAClCoE,EAAepD,QAAQsD,GAGvB,IAAMC,EAAY,IAAInD,kBAAkBpB,EAAS,CAAEqB,eAAgB,EAAGC,aAAc,IACpF6C,EAAenD,QAAQuD,GACvBD,EAAatD,QAAQuD,GAGrB,IAAMC,EAAY,IAAI1D,SAASd,GAM/B,OALAuE,EAAUvD,QAAQwD,EAAUzD,MAG5B0B,EAAiB0B,EAAgBG,EAAcvD,EAAMf,EAAQU,aAEtD,CACLwD,aACAC,iBACAG,eACAE,aAwUgBC,CAAmBV,KAAKhB,aAAcgB,KAAKR,aAAcQ,KAAKP,SAC9EO,KAAKX,kBAAkBpC,QAAQ+C,KAAKV,SAASmB,WAG7CT,KAAKT,YAjUT,SAA+BtD,EAAuBe,EAAc2D,GAElE,IAAMC,EAAkB,IAAIC,cAAc5E,GAGpC4C,EAAU,IAAI9B,SAASd,GAC7B2E,EAAgB3D,QAAQ4B,GAGxB,IAAMiC,EAAU,IAAI/D,SAASd,GAGvB8E,EAAe,IAAI1D,kBAAkBpB,EAAS,CAAEqB,eAAgB,EAAGC,aAAc,IAWvF,OAVAsB,EAAQ5B,QAAQ8D,GAChBD,EAAQ7D,QAAQ8D,GAGhBJ,EAAM1D,QAAQ2D,GACdD,EAAM1D,QAAQ6D,GAGdpC,EAAiBG,EAASiC,EAAS9D,EAAMf,EAAQU,aAE1C,CACLiE,kBACA/B,UACAiC,UACAC,gBAsSmBC,CAAsBhB,KAAKhB,aAAcgB,KAAKN,WAAYM,KAAKV,SAASmB,WAG3FT,KAAKL,sBAAwB,IAAI5C,SAASiD,KAAKhB,cAC/CgB,KAAKL,sBAAsB3C,KAAKN,eAAesD,KAAKJ,kBAAmBI,KAAKhB,aAAarC,aAEzFqD,KAAKT,YAAYwB,aAAa9D,QAAQ+C,KAAKL,uBAC3CK,KAAKL,sBAAsB1C,QAAQ+C,KAAKhB,aAAaiC,aAGrDjB,KAAKjB,sBAAuB,EAG5BmC,MAAMC,oDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL5D,EAAoB,EAAKqB,aAAcuC,EAAW,SAAU,EAAKtC,mBAAoB,EAAKC,oBAAqB,EAAKC,oBAAqB,EAAKC,0BAE/IoC,OAAM,SAACC,GACNC,QAAQC,MAAM,oCAAqCF,MAGvDP,MAAMC,iDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL5D,EAAoB,EAAKqB,aAAcuC,EAAW,WAAY,EAAKtC,mBAAoB,EAAKC,oBAAqB,EAAKC,oBAAqB,EAAKC,0BAEjJoC,OAAM,SAACC,GACNC,QAAQC,MAAM,iCAAkCF,MAGpDP,MAAMC,6CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL5D,EAAoB,EAAKqB,aAAcuC,EAAW,OAAQ,EAAKtC,mBAAoB,EAAKC,oBAAqB,EAAKC,oBAAqB,EAAKC,0BAE7IoC,OAAM,SAACC,GACNC,QAAQC,MAAM,kCAAmCF,MAIrDP,MAAMC,gEACHC,MAAK,SAACC,GAAD,OAAcA,EAASO,iBAC5BR,MAAK,SAACS,GAAD,OAAY,EAAK7C,aAAc8C,gBAAgBD,MACpDT,MAAK,SAACW,GACD,EAAKxC,cACP,EAAKA,YAAYqB,gBAAgBiB,OAASE,MAG7CP,OAAM,SAACC,GACNC,QAAQC,MAAM,+BAAgCF,SA9LtD,oCAqME,WAEE,GAA0B,OAAtBzB,KAAKhB,aAAT,CAIA,IAAMgD,EAA6B,CAAC,EAAK,GACnCC,EAA+B,CAAC,EAAK,GAGrCC,EAAa,IAEbC,EAAY,IAEZC,EAAgB,IAElBC,EAAqB,EACrBC,EAAoB,EACpBC,EAAoB,EAIxB,GAAIvC,KAAKzM,IAAM,MAAQ,EACrB,OAAQyM,KAAKzM,KACX,KAAK2O,EACHK,EAAoB,EACpB,MAEF,KAAKJ,EACHG,EAAoB,EACpB,MAEF,KAxBa,EAyBb,KAAKF,EACHC,EAAqB,OAItB,GAAIrC,KAAKzM,IAAM,KAAO,EACzB,OAAQyM,KAAKzM,KACX,KA/BgB,GAgCd8O,EAAqB,GACrBE,EAAoB,GACpB,MAEF,KAlCc,IAmCZA,EAAoB,GACpBD,EAAoB,GACpB,MAEF,KArCiB,IAsCfA,EAAoB,GACpBD,EAAqB,QAMrBrC,KAAKzM,IAAM2O,GAEbG,EAAqB3K,EAAkBsI,KAAKzM,IAAK,CApDpC,EAoD+C2O,GAAaD,GACzEM,EAAoB7K,EAAkBsI,KAAKzM,IAAK,CArDnC,EAqD8C2O,GAAaF,IAEjEhC,KAAKzM,IAAM4O,GAElBI,EAAoB7K,EAAkBsI,KAAKzM,IAAK,CAAC2O,EAAYC,GAAYF,GACzEK,EAAoB5K,EAAkBsI,KAAKzM,IAAK,CAAC2O,EAAYC,GAAYH,IAElEhC,KAAKzM,IAAM6O,IAElBE,EAAoB5K,EAAkBsI,KAAKzM,IAAK,CAAC4O,EAAWC,GAAgBH,GAC5EI,EAAqB3K,EAAkBsI,KAAKzM,IAAK,CAAC4O,EAAWC,GAAgBJ,KAxSrF,SAA6B5F,EAAgBG,EAAkBC,EAAc+B,GAAuE,IAAD,uBAAnDJ,EAAmD,iCAAnDA,EAAmD,kBACjJ,cAAkBA,EAAlB,eAA0B,CAArB,IAAIC,EAAK,KAEE,OAAVA,IAIJA,EAAMjB,gBAAgBf,OAAOY,KAAKN,eAAeN,EAAQmC,GACzDH,EAAMjB,gBAAgBZ,SAASS,KAAKN,eAAeH,EAAUgC,GAC7DH,EAAMjB,gBAAgBX,KAAKQ,KAAKN,eAAeF,EAAM+B,KAoSrDiE,CACEH,EACAE,EACAD,EACAtC,KAAKhB,aAAarC,YAClBqD,KAAKf,mBACLe,KAAKd,oBACLc,KAAKb,oBACLa,KAAKZ,0BAzRX,2CA+RE,WAA+C,IAAD,MAE5C,GAA0B,OAAtBY,KAAKhB,aAAT,CAKA,IAAMyD,EAAazK,EAAMgI,KAAKxM,WAAY,EAAG,KAAO,IAEpD,UAAAwM,KAAKd,2BAAL,SAA0BxB,OAAOV,KAAKN,eAAe+F,EAAYzC,KAAKhB,aAAcrC,aACpF,UAAAqD,KAAKb,2BAAL,SAA0BzB,OAAOV,KAAKN,eAAe+F,EAAYzC,KAAKhB,aAAcrC,aACpF,UAAAqD,KAAKZ,6BAAL,SAA4B1B,OAAOV,KAAKN,eAAe+F,EAAYzC,KAAKhB,aAAcrC,gBA1S1F,0CAgTE,WAEE,GAA0B,OAAtBqD,KAAKhB,aAAT,CAMA,IAAM0D,EAAmBhL,EAAkBM,EAAMgI,KAAKvM,UAAW,EAAG,KAAM,CAAC,EAAG,KAAM,EAAE,GAAI,MA3Y9F,SAAiCgJ,EAAmB8B,EAAgBC,GAAiF,IAAD,uBAAnDL,EAAmD,iCAAnDA,EAAmD,kBAClJ,cAAkBA,EAAlB,eAA0B,CAArB,IAAIC,EAAK,KAEE,OAAVA,IAKAI,IACFJ,EAAMtB,YAAYV,OAAOK,UAAUgC,sBAAsBF,GACzDH,EAAMtB,YAAYP,SAASE,UAAUgC,sBAAsBF,GAC3DH,EAAMtB,YAAYN,KAAKC,UAAUgC,sBAAsBF,IAGzDH,EAAMtB,YAAYV,OAAOK,UAAUC,eAAeD,EAAW8B,GAC7DH,EAAMtB,YAAYP,SAASE,UAAUC,eAAeD,EAAW8B,GAC/DH,EAAMtB,YAAYN,KAAKC,UAAUC,eAAeD,EAAW8B,KA8X3DoE,CAFqD,IAAnC1O,KAAK2O,IAAI,EAAGF,EAAiB,IAI7C1C,KAAKhB,aAAarC,aAClB,EACAqD,KAAKf,mBACLe,KAAKd,oBACLc,KAAKb,oBACLa,KAAKZ,0BAlUX,mCAwUE,WAAuC,IAAD,OAKpC,GAA0B,OAAtBY,KAAKhB,cAAoD,OAA3BgB,KAAKX,mBAA+BW,KAAKjB,qBAA3E,CAKA,IAAKiB,KAAKH,0BAWR,OATAG,KAAKX,kBAAkBrC,KAAKyB,sBAAsBuB,KAAKhB,aAAarC,aACpEqD,KAAKX,kBAAkBrC,KAAKN,eAAe,EAAGsD,KAAKhB,aAAarC,aAGhE2B,EAA2C,IAAtB5C,EAAiB,GAAUsE,KAAKhB,aAAarC,aAAa,EAAMqD,KAAKf,oBAC1FX,EAA2C,IAAtB5C,EAAiB,GAAUsE,KAAKhB,aAAarC,aAAa,EAAMqD,KAAKd,qBAC1FZ,EAA2C,IAAtB5C,EAAiB,GAAUsE,KAAKhB,aAAarC,aAAa,EAAMqD,KAAKb,0BAC1Fb,EAA2C,IAAtB5C,EAAiB,GAAUsE,KAAKhB,aAAarC,aAAa,EAAMqD,KAAKZ,uBAK5F,IAEMyD,EAAkB7C,KAAKD,qBAAuB,EAC9C+C,EAAW9C,KAAKD,qBAAuB,GAI7C,GAAIC,KAAKF,4BAPa,IAOiCE,KAAKhB,aAAarC,YACvEoG,YAAW,WACT,EAAKC,0BARYC,SAMrB,CAQA,IAAMC,EAAmBjP,KAAKmC,MAAMnC,KAAKkP,SAAWtH,EAAgBhB,QAC9DuI,EAAkBvH,EAAgBqH,GACpCG,EAAazH,EAAkBwH,GAG/BC,EAAWxI,QAAU,IACvBwI,EAAaA,EAAWC,OAAOD,IAIjC,IAjDoC,EAiDhC1G,EAAc1I,KAAKE,IAAI6L,KAAKF,4BAA6BE,KAAKhB,aAAarC,aAjD3C,cAuDnB0G,GAvDmB,IAuDpC,IAAI,EAAJ,qBAA6B,CAAC,IAAtBE,EAAqB,QAE3BvD,KAAKX,kBAAkBrC,KAAKwG,wBAAwB,EAAG7G,GAGvD,kBAAoChB,EAAW4H,GAA/C,GAAOE,EAAP,KAAsBC,EAAtB,KACApF,EAAuD,KAAjCmF,EAAgBC,EAAW,IAAW/G,GAAa,EAAOqD,KAAKf,oBACrFX,EAAuD,KAAjCmF,EAAgBC,EAAW,IAAW/G,GAAa,EAAOqD,KAAKd,qBACrFZ,EAAuD,KAAjCmF,EAAgBC,EAAW,IAAW/G,GAAa,EAAOqD,KAAKb,qBACrFb,EAAuD,KAAjCmF,EAAgBC,EAAW,IAAW/G,GAAa,EAAOqD,KAAKZ,uBAGrFzC,GAAeqD,KAAKD,qBACpBC,KAAKX,kBAAkBrC,KAAK2G,gBAAgB,EAAGhH,EAAakG,GAG5DlG,GAAekG,EACflG,GAAemG,GAxEmB,8BA4EpCnG,GAAeqD,KAAKD,qBAAuB,EAG3CC,KAAKF,4BAA8BnD,EAGnCoG,YAAW,WACT,EAAKC,0BA1DcC,SAjWzB,kBAkaE,WAC4B,OAAtBjD,KAAKhB,eACPgB,KAAKhB,aAAe,IAAIiB,aACxBD,KAAK4D,2BAEL5D,KAAK6D,yBACL7D,KAAK8D,+BACL9D,KAAK+D,gCA3jBX,WAAiF,IAAD,uBAAnD5F,EAAmD,yBAAnDA,EAAmD,gBAC9E,cAAkBA,EAAlB,eAA0B,CAArB,IAAIC,EAAK,KAEE,OAAVA,IAIJA,EAAMtB,YAAYV,OAAO4H,QACzB5F,EAAMtB,YAAYP,SAASyH,QAC3B5F,EAAMtB,YAAYN,KAAKwH,UAqjBrBC,CAAiBjE,KAAKf,mBAAoBe,KAAKd,oBAAqBc,KAAKb,oBAAqBa,KAAKZ,uBAG7E,OAAlBY,KAAKV,UACPU,KAAKV,SAASa,WAAW6D,SAI7BhE,KAAKhB,aAAakF,SAClBlE,KAAKgD,0BArbT,mBA2bE,WAC4B,OAAtBhD,KAAKhB,cACPgB,KAAKhB,aAAamF,YA7bxB,uBAqcE,SAAiB5Q,GACfyM,KAAKzM,IAAMA,EAAM,IACjByM,KAAK6D,2BAvcT,8BA8cE,SAAwBrQ,GACtBwM,KAAKxM,WAAaA,EAClBwM,KAAK+D,kCAhdT,6BAudE,SAAuBtQ,GACrBuM,KAAKvM,UAAYA,EACjBuM,KAAK8D,iCAzdT,0BAgeE,SAAoBM,GAClBpE,KAAKJ,kBAAoB5H,EAAMoM,EAAQ,EAAK,GAGlB,OAAtBpE,KAAKhB,cAAwD,OAA/BgB,KAAKL,uBAAmCK,KAAKjB,sBAI/EiB,KAAKL,sBAAsB3C,KAAKN,eAAesD,KAAKJ,kBAAmBI,KAAKhB,aAAarC,eAxe7F,mCA+eG,SAA6B0H,GAC5BrE,KAAKN,WAAa1H,EAAMqM,EAAW,EAAK,GAGd,OAAtBrE,KAAKhB,cAA8C,OAArBgB,KAAKT,aAAyBS,KAAKjB,sBAIrEL,EAAiBsB,KAAKT,YAAYV,QAASmB,KAAKT,YAAYuB,QAASd,KAAKN,WAAYM,KAAKhB,aAAarC,eAvf5G,gCA8fE,SAA0B0H,GACxBrE,KAAKP,QAAUzH,EAAMqM,EAAW,EAAK,GAGX,OAAtBrE,KAAKhB,cAA2C,OAAlBgB,KAAKV,UAAsBU,KAAKjB,sBAIlEL,EAAiBsB,KAAKV,SAASc,eAAgBJ,KAAKV,SAASiB,aAAcP,KAAKP,QAASO,KAAKhB,aAAarC,eAtgB/G,gCA6gBE,SAA0BF,GACxBuD,KAAKR,aAAexH,EAAMyE,EAAW,EAAG,IAGd,OAAtBuD,KAAKhB,cAA2C,OAAlBgB,KAAKV,UAAsBU,KAAKjB,sBAIlEiB,KAAKV,SAASa,WAAW1D,UAAUC,eAAesD,KAAKR,aAAcQ,KAAKhB,aAAarC,eArhB3F,oCA4hBE,SAA8B2H,GAExBtE,KAAKH,4BAA8ByE,IACrCtE,KAAKH,0BAA4ByE,EACjCtE,KAAKgD,2BAhiBX,iCAwiBE,SAA2BuB,GACzBvE,KAAKD,qBAAuB/H,EAAMuM,EAAiB,IAAM,QAziB7D,KCxQeC,MA/Of,WACE,IAAMC,EAAUnM,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM/D,OAChDmR,EAAiBpM,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM9D,cACvDmR,EAAgBrM,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM7D,aACtDmR,EAAeC,iBAAO,IAAI/F,EAAa2F,EAASC,EAAgBC,IAEtE,EAAoDG,oBAAS,GAA7D,mBAAOC,EAAP,KAA4BC,EAA5B,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAA4DN,mBAAS,GAArE,mBAAOO,EAAP,KAA+BC,EAA/B,KACA,EAAsDR,mBAAS,IAA/D,mBAAOS,EAAP,KAA4BC,EAA5B,KACA,EAAsDV,mBAAS,IAA/D,mBAAOW,EAAP,KAA4BC,EAA5B,KACA,EAAgEZ,oBAAS,GAAzE,mBAAOjF,EAAP,KAAkC8F,EAAlC,KACA,EAAiDb,mBAAS,GAA1D,mBAAOc,EAAP,KAA6BC,EAA7B,KAGAC,qBAAU,WACRlB,EAAamB,QAAQC,UAAUvB,KAC9B,CAACA,IAEJqB,qBAAU,WACRlB,EAAamB,QAAQE,iBAAiBvB,KACrC,CAACA,IAEJoB,qBAAU,WACRlB,EAAamB,QAAQG,gBAAgBvB,KACpC,CAACA,IAGJ,IAAMwB,EAAiB,SAACC,GACtBA,EAAMC,mBAwER,OACE,sBACEC,GAAG,aACHC,YAAaJ,EACbK,aAAcL,EAHhB,UAME,sBACEM,UAAU,eADZ,UAGG1B,GACC,yBACEzI,KAAK,SACLoK,QA1EgB,SAACN,GAYzB,OAXInB,EACFL,EAAamB,QAAQY,QAGrB/B,EAAamB,QAAQa,OAGvB1B,GAAcD,GAEdmB,EAAMS,iBACNT,EAAMC,mBACC,GA4DD,UAIE,qBACEI,UAAU,UADZ,SAEE,qBAAKK,KAAM3F,gDAAmE8D,EAAa,QAAU,YAEtGA,EAAY,QAAU,UAI3B,yBACE3I,KAAK,SACLoK,QA9FmB,SAACN,GAK1B,OAJApB,GAAsBD,GAEtBqB,EAAMS,iBACNT,EAAMC,mBACC,GAuFH,UAIE,qBACEI,UAAU,UADZ,SAEE,qBAAKK,KAAM3F,gDAAmE4D,EAAuB,aAAe,kBAErHA,EAAsB,aAAe,mBAIzCA,GACD,gCACE,sBACE0B,UAAU,eADZ,UAGE,uBAAOM,QAAQ,cAAf,oBAGA,uBACEzK,KAAK,QACLgK,GAAG,cACHpS,IAAI,IACJC,IAAI,MACJ6S,KAAK,IACL/O,MAAOkN,EACP8B,QAhGkB,SAACb,GAC3B,IAAMc,EAAcC,SAAUf,EAAMgB,OAA4BnP,MAAO,IAEvEmN,EAAiB8B,GACjBtC,EAAamB,QAAQsB,aAAaH,EAAc,WA+F5C,sBACET,UAAU,eADZ,UAGE,uBAAOM,QAAQ,cAAf,oBAGA,uBACEzK,KAAK,QACLgK,GAAG,cACHpS,IAAI,IACJC,IAAI,MACJ6S,KAAK,IACL/O,MAAOoN,EACP4B,QAzGqB,SAACb,GAC9B,IAAMkB,EAAiBH,SAAUf,EAAMgB,OAA4BnP,MAAO,IAE1EqN,EAA0BgC,GAC1B1C,EAAamB,QAAQwB,sBAAsBD,EAAiB,WAwGxD,sBACEb,UAAU,eADZ,UAGE,uBAAOM,QAAQ,oBAAf,8BAGA,uBACEzK,KAAK,QACLgK,GAAG,oBACHpS,IAAI,IACJC,IAAI,MACJ6S,KAAK,IACL/O,MAAOsN,EACP0B,QAlHkB,SAACb,GAC3B,IAAMkB,EAAiBH,SAAUf,EAAMgB,OAA4BnP,MAAO,IAE1EuN,EAAuB8B,GACvB1C,EAAamB,QAAQyB,mBAAmBF,EAAiB,WAiHrD,sBACEb,UAAU,eADZ,UAGE,uBAAOM,QAAQ,oBAAf,8BAGA,uBACEzK,KAAK,QACLgK,GAAG,oBACHpS,IAAI,IACJC,IAAI,KACJ6S,KAAK,IACL/O,MAAOwN,EACPwB,QA3HkB,SAACb,GAC3B,IAAMqB,EAAiBN,SAAUf,EAAMgB,OAA4BnP,MAAO,IAE1EyN,EAAuB+B,GACvB7C,EAAamB,QAAQ2B,mBAAmBD,SA0HpC,qBACEhB,UAAU,eADZ,SAGE,yBACEnK,KAAK,SACLoK,QA5HiB,SAACN,GAC1B,IAAMuB,GAAa9H,EAOnB,OALA8F,EAA2BgC,GAC3B/C,EAAamB,QAAQ6B,uBAAuBD,GAE5CvB,EAAMS,iBACNT,EAAMC,mBACC,GAkHD,UAIE,qBACEI,UAAU,UADZ,SAEE,qBAAKK,KAAM3F,gDAAmEtB,EAA6B,WAAa,aAEzHA,EAA4B,aAAe,mBAGhD,sBACE4G,UAAU,eADZ,UAGE,uBAAOM,QAAQ,qBAAf,4BAGA,uBACEzK,KAAK,QACLgK,GAAG,qBACHpS,IAAI,OACJC,IAAI,KACJ6S,KAAK,OACL/O,MAAO2N,EACPqB,QAvImB,SAACb,GAC5B,IAAMyB,EAAgBC,WAAY1B,EAAMgB,OAA4BnP,OAEpE4N,EAAiBgC,GACjBjD,EAAamB,QAAQgC,oBAAoBF,gB,MCpC9BG,MA/Df,WACE,IAAMC,EAAW7P,IACjB,EAAkC0M,oBAAS,GAA3C,mBAAOoD,EAAP,KAAkBC,EAAlB,KAIArC,qBAAU,WACR,GAAKoC,EAAL,CAKA,IAWME,EAAmB5S,OAAO6S,aAXjB,WAEb,IAAMC,EAAeC,KAAKC,MAAQ,IAAS,EAAIvU,KAAKwU,GAG9CC,EAAqBzU,KAAK0U,MAA8B,EAAxB1U,KAAK2U,IAAIN,IAE/CL,EAAS,CAAE3L,KAAM,kBAAmBvI,QAHhB,IAIpBkU,EAAS,CAAE3L,KAAM,yBAA0BvI,QAAS2U,MAjB7B,KAsBzB,OAAO,WACLlT,OAAOqT,cAAcT,OAEtB,CAACH,EAAUC,IAGd,IAAM/B,EAAiB,SAACC,GACtBA,EAAMC,mBAWR,OACE,qBACEC,GAAG,cACHC,YAAaJ,EACbK,aAAcL,EAHhB,SAKE,yBACE7J,KAAK,SACLoK,QAhBqB,SAACN,GAK1B,OAJA+B,GAAcD,GAEd9B,EAAMS,iBACNT,EAAMC,mBACC,GASL,UAIE,qBACEI,UAAU,UADZ,SAEE,qBAAKK,KAAM3F,gDAAmE+G,EAAa,cAAgB,mBAE5GA,EAAY,eAAiB,sBCDvBY,MA1Df,WACE,IAAMrE,EAAUnM,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM/D,OAChDmR,EAAiBpM,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM9D,cACvDmR,EAAgBrM,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM7D,aACtDsV,EAAkBlE,iBAAe,GACjCmE,EAAyBnE,iBAAe,GACxCoE,EAAwBpE,iBAAe,GAiD7C,OA9CAiB,qBAAU,WAAO,IAAD,EAERoD,EAAW,cAAUzE,EAAV,aAAsBC,EAAtB,cAA0CC,EAA1C,MAOjB,GAJA,UAAAvP,SAAS+T,cAAc,mCAAvB,SAAoDC,aAAa,UAAWF,GAIxEjV,KAAKoV,IAAIN,EAAgBhD,QAAUtB,GAAWxQ,KAAKoV,IAAIL,EAAuBjD,QAAUrB,GAAkBzQ,KAAKoV,IAAIJ,EAAsBlD,QAAUpB,GAAiB,GAAI,CAE1K,IAAM2E,EAAalU,SAASmU,cAAc,UAC1CD,EAAWF,aAAa,QAAS,QACjCE,EAAWF,aAAa,SAAU,QAGlC,IAAMI,EAAMF,EAAWG,WAAW,KAAM,CAAEC,OAAO,EAAMC,gBAAgB,IAEvE,GAAIH,EAAK,CAAC,IAAD,EAEDI,EAAS,IAAIC,OACnBD,EAAOE,OAAO,GAAI,GAClBF,EAAOG,OAAO,GAAI,GAClBH,EAAOG,OAAO,GAAI,IAClBH,EAAOG,OAAO,GAAI,IAClBH,EAAOG,OAAO,GAAI,IAClBH,EAAOG,OAAO,EAAG,IACjBH,EAAOI,YAEPR,EAAIS,UAAYf,EAChBM,EAAI1P,KAAK8P,GAGT,IAAMM,EAAUZ,EAAWa,UAAU,aACrC,UAAA/U,SAAS+T,cAAc,2BAAvB,SAA4CC,aAAa,OAAQc,GAGnEZ,EAAWc,SAGXrB,EAAgBhD,QAAUtB,EAC1BuE,EAAuBjD,QAAUrB,EACjCuE,EAAsBlD,QAAUpB,KAEjC,CAACF,EAASC,EAAgBC,IAEtB,MC6CM0F,MAtGf,WACE,IAAM1R,EAAUL,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM/D,OAChDqF,EAAiBN,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM9D,cACvDqF,EAAgBP,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM7D,aACtD6W,EAAiBhS,GAAe,SAAC1E,GAAD,OAAWA,EAAM4D,QAAQf,aAAalD,OAE5E,OACE,sBACEgX,QAAQ,cADV,UAGE,sBACEC,EAAE,qGACF1Q,KAAK,oBACLP,OAAO,UAET,sBACEiR,EAAE,mLACF1Q,KAAK,mBACLP,OAAO,UAET,sBACEiR,EAAE,mLACF1Q,KAAK,aACLP,OAAO,UAET,iCACE,iCACE+M,GAAG,aACHmE,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,kBAAkB,sBANpB,UAQE,sBACElW,OAAO,IACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAApB,eAEV,sBACEhE,OAAO,MACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAApB,gBAAmCE,EAAnC,SAEV,sBACElE,OAAO,IACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAApB,oBAGZ,iCACE2N,GAAG,OACHmE,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,kBAAkB,qBANpB,UAQE,sBACElW,OAAO,IACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAA4B,GAAjB2R,EAA/B,gBAEV,sBACE3V,OAAO,OACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAA4B,EAAjB2R,EAA/B,gBAEV,sBACE3V,OAAO,MACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAApB,gBAEV,sBACEhE,OAAO,OACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAA4B,EAAjB2R,EAA/B,gBAEV,sBACE3V,OAAO,IACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAA4B,GAAjB2R,EAA/B,mBAGZ,iCACEhE,GAAG,cACHmE,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,kBAAkB,sBANpB,UAQE,sBACElW,OAAO,IACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAApB,eAAkCE,EAAlC,SAEV,sBACElE,OAAO,MACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAApB,YAA+BC,EAA/B,aAAkDC,EAAlD,SAEV,sBACElE,OAAO,IACPW,MAAO,CAAC,UAAY,OAAZ,OAAoBqD,EAApB,iBAAoCE,EAApC,mB,MCwMLiS,MA5Rf,WACE,IAAM7C,EAAW7P,IACXuM,EAAgBrM,GAAe,SAAC1E,GAAD,OAAWA,EAAM0D,MAAM7D,aACtDc,EAAc+D,GAAe,SAAC1E,GAAD,OAAWA,EAAM4D,QAAQjD,eACtDkC,EAAe6B,GAAe,SAAC1E,GAAD,OAAYA,EAAM4D,QAAQf,gBAC9D,EAAkCqO,oBAAS,GAA3C,mBAAOiG,EAAP,KAAkBC,EAAlB,KACMC,EAAoBpG,iBAAO,GAC3BqG,EAAoBrG,iBAAO,GA6PjC,OA1PAiB,qBAAU,WACR,IAAMqF,EAAe,WACnBH,GAAa,GACb/C,EAAS,CAAE3L,KAAM,oBAKnB,OAFA9G,OAAO4V,iBAAiB,SAAUD,GAE3B,WACL3V,OAAO6V,oBAAoB,SAAUF,MAEtC,CAAClD,IAGJnC,qBAAU,WACR,IAAMwF,EAAY,SAAClF,GAMjB,OAAOA,EAAMmF,MACX,IAAK,UACL,IAAK,UACHtD,EAAS,CAAE3L,KAAM,yBAA0BvI,QAL3B,IAMhB,MAEF,IAAK,UACL,IAAK,YACHkU,EAAS,CAAE3L,KAAM,yBAA0BvI,SAV3B,IAWhB,MAEF,IAAK,UACL,IAAK,aACHkU,EAAS,CAAE3L,KAAM,kBAAmBvI,QAfpB,IAgBhB,MAEF,IAAK,UACL,IAAK,YACHkU,EAAS,CAAE3L,KAAM,kBAAmBvI,SApBpB,IAqBhB,MAEF,IAAK,YACL,IAAK,QACHkU,EAAS,CAAE3L,KAAM,wBAAyBvI,QAzB1B,IA0BhB,MAEF,IAAK,iBACL,IAAK,QACHkU,EAAS,CAAE3L,KAAM,wBAAyBvI,SA9B1B,MAwCtB,OAFAyB,OAAO4V,iBAAiB,UAAWE,GAE5B,WACL9V,OAAO6V,oBAAoB,UAAWC,MAEvC,CAACrD,IAIJnC,qBAAU,WACR,IAAM0F,EAAiB,SAACpF,GAGtB,IAAI2E,EAAJ,CAKA,IAAIU,EACAC,EAEJ,GAAmB,eAAftF,EAAM9J,KAAuB,CAC/B,IAAMqP,EAAavF,EAGnB,GAAkC,IAA9BuF,EAAWC,QAAQ/Q,OACrB,OAGF4Q,EAAiBE,EAAWC,QAAQ,GAAGC,QACvCH,EAAiBC,EAAWC,QAAQ,GAAGE,YAEpC,IAAmB,cAAf1F,EAAM9J,KAOb,OANA,IAAMyP,EAAa3F,EAEnBqF,EAAiBM,EAAWF,QAC5BH,EAAiBK,EAAWD,QAM9Bd,GAAa,GACbC,EAAkBlF,QAAU0F,EAC5BP,EAAkBnF,QAAU2F,IAW9B,OAHAlW,OAAO4V,iBAAiB,aAAcI,GACtChW,OAAO4V,iBAAiB,YAAaI,GAE9B,WACLhW,OAAO6V,oBAAoB,aAAcG,GACzChW,OAAO6V,oBAAoB,YAAaG,MAEzC,CAACvD,EAAU8C,IAGdjF,qBAAU,WACR,IAAMkG,EAAgB,SAAC5F,GAGrB,GAAK2E,EAAL,CAIA,IAAIU,EACAC,EACAO,EAGJ,GAAmB,cAAf7F,EAAM9J,KAAsB,CAC9B,IAAMqP,EAAavF,EAGnB,GAAkC,IAA9BuF,EAAWC,QAAQ/Q,OACrB,OAGFoR,GAAe,EACfR,EAAiBE,EAAWC,QAAQ,GAAGC,QACvCH,EAAiBC,EAAWC,QAAQ,GAAGE,YAEpC,IAAmB,cAAf1F,EAAM9J,KAQb,OAPA,IAAMyP,EAAa3F,EAEnB6F,GAAe,EACfR,EAAiBM,EAAWF,QAC5BH,EAAiBK,EAAWD,QAQ9B,IAAMI,EAAYT,EAAiBR,EAAkBlF,QAC/CoG,EAAYT,EAAiBR,EAAkBnF,QAC/CqG,EAAgBnY,KAAKgC,KAAKhC,KAAK2O,IAAIsJ,EAAW,GAAKjY,KAAK2O,IAAIuJ,EAAW,IAE7E,GAAIC,GAAiB,EAAI7X,EAAa,CAEpC,IACI8X,EAAe,IADNpY,KAAKqY,OAAOH,EAAYC,EAAeF,EAAYE,GACvCnY,KAAKwU,GAG1B4D,EAAQ,IACVA,GAAS,KAUTpE,EAFEoE,GAAS,GAEF,CAAE/P,KAAM,wBAAyBvI,QAAS0C,EAAahD,WAEzD4Y,GAAS,IAEP,CAAE/P,KAAM,yBAA0BvI,QAAS0C,EAAajD,YAE1D6Y,GAAS,IAEP,CAAE/P,KAAM,kBAAmBvI,QAAS0C,EAAalD,KAEnD8Y,GAAS,IAEP,CAAE/P,KAAM,wBAAyBvI,SAAU0C,EAAahD,WAE1D4Y,GAAS,IAEP,CAAE/P,KAAM,yBAA0BvI,SAAU0C,EAAajD,YAIzD,CAAE8I,KAAM,kBAAmBvI,SAAU0C,EAAalD,MAI7D0X,EAAkBlF,QAAU0F,EAC5BP,EAAkBnF,QAAU2F,EAGxBO,GAAgB,YAAaM,WAC/BA,UAAUC,QAAQ,IAKtBpG,EAAMS,iBACNT,EAAMC,oBAOR,OAHA7Q,OAAO4V,iBAAiB,YAAaY,GACrCxW,OAAO4V,iBAAiB,YAAaY,GAE9B,WACLxW,OAAO6V,oBAAoB,YAAaW,GACxCxW,OAAO6V,oBAAoB,YAAaW,MAEzC,CAAC/D,EAAU1T,EAAawW,EAAWtU,IAGtCqP,qBAAU,WACR,IAAM2G,EAAe,WAOnBzB,GAAa,IAQf,OAJAxV,OAAO4V,iBAAiB,WAAYqB,GACpCjX,OAAO4V,iBAAiB,cAAeqB,GACvCjX,OAAO4V,iBAAiB,UAAWqB,GAE5B,WACLjX,OAAO6V,oBAAoB,WAAYoB,GACvCjX,OAAO6V,oBAAoB,cAAeoB,GAC1CjX,OAAO6V,oBAAoB,UAAWoB,MAEvC,CAAC1B,IAGF,sBACEzV,MAAO,CAAC,OAAUyV,EAAY,WAAa,QAC3CtE,UAAW9B,GAAiB,GAAK,gBAAkB,iBAFrD,UAKE,qBACE8B,UAAU,cADZ,SAGGsE,GAAa,cAAC,EAAD,MAEhB,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,KAEE5J,MCvRRuL,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUzV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ/B,SAASyX,eAAe,W","file":"static/js/main.90ea7388.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\ninterface ColorState {\r\n  /**\r\n   * The hue of the main color, on a 0-360 degree scale.\r\n   */\r\n  hue: number,\r\n\r\n  /**\r\n   * The saturation of the main color, on a 0-100% scale.\r\n   */\r\n  saturation: number,\r\n\r\n  /**\r\n   * The lightness of the main color, on a 0-100% scale.\r\n   */\r\n  lightness: number\r\n}\r\n\r\nconst initialState: ColorState = {\r\n  hue: 300,\r\n  saturation: 50,\r\n  lightness: 40\r\n};\r\n\r\nexport const colorSlice = createSlice({\r\n  name: 'color',\r\n  initialState,\r\n  reducers: {\r\n    adjustHue: (state, action: PayloadAction<number>) => {\r\n      let newHue = (state.hue + (action.payload % 360));\r\n\r\n      if (newHue < 0) {\r\n        newHue += 360;\r\n      }\r\n      else if (newHue > 360) {\r\n        newHue -= 360;\r\n      }\r\n\r\n      state.hue = newHue;\r\n    },\r\n    adjustSaturation: (state, action: PayloadAction<number>) => {\r\n      state.saturation = Math.min(100, Math.max(0, state.saturation + action.payload));\r\n    },\r\n    adjustLightness: (state, action: PayloadAction<number>) => {\r\n      state.lightness = Math.min(100, Math.max(0, state.lightness + action.payload));\r\n    }\r\n  }\r\n});\r\n\r\nexport const { adjustHue, adjustSaturation, adjustLightness } = colorSlice.actions;\r\nexport default colorSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { defineGrid, extendHex, HexFactory, PointLike, CubeCoordinates } from \"honeycomb-grid\";\r\n\r\n/**\r\n * The arguments used to customize the hex factory and propagated throughout the stack.\r\n */\r\nexport interface HexArgs {\r\n  orientation: 'flat',\r\n  size: number,\r\n  offset: number\r\n}\r\n\r\nexport interface Size {\r\n  width: number,\r\n  height: number\r\n}\r\n\r\n/**\r\n * Describes the scaling factors that are used for different color components.\r\n */\r\nexport interface ColorScaling {\r\n  /**\r\n   * The scaling factor used for the hue component.\r\n   */\r\n  hue: number,\r\n\r\n  /**\r\n   * The scaling factor used for the saturation component.\r\n   */\r\n  saturation: number,\r\n\r\n  /**\r\n   * The scaling factor used for the lightness component.\r\n   */\r\n  lightness: number\r\n}\r\n\r\nexport interface HexGridState {\r\n  /**\r\n   * The current screen dimensions.\r\n   */\r\n  screenDimensions: Size,\r\n\r\n  /**\r\n   * The grid dimensions.\r\n   */\r\n  gridDimensions: Size,\r\n\r\n  /**\r\n   * The dimensions of each cell in the grid.\r\n   */\r\n  cellDimensions: Size,\r\n  \r\n  /**\r\n   * The string of points to use when rendering each SVG hexagon in the grid.\r\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/points}\r\n   */\r\n  cellPointsString: string, // XXX: Good memoization candidate if it can be easily shared across all Cell component instances\r\n\r\n  /**\r\n   * The base size used for each hexagon in the grid.\r\n   * This represents the distance from the center of the hex to each corner.\r\n   * @see {@link https://www.redblobgames.com/grids/hexagons/#size-and-spacing}\r\n   */\r\n  baseHexSize: number,\r\n\r\n  /**\r\n   * The Cartesian coordinates for the hex at the center of the grid.\r\n   */\r\n  centerCoord: PointLike, // XXX: Good memoization candidate if it can be easily shared across all Cell component instances (and the Grid component)\r\n\r\n  /**\r\n   * The cubic coordinates for the hex at the center of the grid.\r\n   */\r\n  centerCoordCube: CubeCoordinates, // XXX: Good memoization candidate if it can be easily shared across all Cell component instances (and the Grid component)\r\n\r\n  /**\r\n   * The scaling to use for display and panning.\r\n   */\r\n  colorScaling: ColorScaling\r\n}\r\n\r\n/**\r\n * Gets a hex factory for the specified hex size.\r\n * @param baseHexSize The base hex size.\r\n * @returns The corresponding hex factory.\r\n */\r\nfunction getHexFactory(baseHexSize: number): HexFactory<HexArgs> {\r\n  return extendHex({\r\n    orientation: 'flat',\r\n    size: baseHexSize,\r\n    offset: -1\r\n  });\r\n}\r\n\r\n/**\r\n * Gets a string of points suitable for use in defining each SVG hexagon.\r\n * @param hexFactory The configured hex factory used for the grid.\r\n * @returns The resulting SVG points string.\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/points}\r\n */\r\nfunction getCornerPointsString(hexFactory: HexFactory<HexArgs>): string {\r\n  return hexFactory()\r\n    .corners()\r\n    .map(({x, y}) => `${x}, ${y}`)\r\n    .join(' ');\r\n}\r\n\r\n/**\r\n * Gets the state to use for the current grid screen.\r\n */\r\nfunction getStateForScreen(): HexGridState {\r\n  // HACK: Define viewport height while we're at it\r\n  // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\r\n  document.documentElement.style.setProperty('--vh', `${window.innerHeight * 0.01}px`);\r\n  \r\n  // Determine the available width/height and use that to determine the constraining direction\r\n  const screenWidth = window.innerWidth || document.documentElement.clientWidth;\r\n  const screenHeight = window.innerHeight || document.documentElement.clientHeight;\r\n  const minDimension = Math.min(screenWidth, screenHeight);\r\n\r\n  // Map the smallest dimension to a hex size\r\n  let baseHexSize = 72;\r\n\r\n  if (minDimension <= 640) {\r\n    baseHexSize = 36;\r\n  }\r\n  else if (minDimension <= 768) {\r\n    baseHexSize = 48;\r\n  }\r\n  else if (minDimension <= 1024) {\r\n    baseHexSize = 60;\r\n  }\r\n\r\n  // Construct a hex factory so we can get the corner string and calculate coordinates for the center\r\n  const hexFactory = getHexFactory(baseHexSize);\r\n  \r\n  // Calculate the correct number of columns and rows using flat-topped coordinates:\r\n  // https://www.redblobgames.com/grids/hexagons/#basics\r\n  // Cell columns: the screen width / 0.75 cell width, plus two for offsets/the right edge\r\n  // Cell rows: the screen height / cell height, plus three for offsets/the bottom edge (Mobile landscape is the cause for the third)\r\n  const cellHeight = baseHexSize * Math.sqrt(3);\r\n  const cellWidth = baseHexSize * 2;\r\n  const cellColumns = Math.floor(screenWidth / (cellWidth * 0.75)) + 2;\r\n  const cellRows = Math.floor(screenHeight / cellHeight) + 3;\r\n\r\n  // Calculate the center coordinate in both Cartesian and cubic formats\r\n  const centerCoord: PointLike = {\r\n    x: Math.floor(cellColumns / 2.0),\r\n    y: Math.floor(cellRows / 2.0)\r\n  };\r\n\r\n  const centerCoordCube = hexFactory(centerCoord).cube();\r\n\r\n  // Calculate the scaling factors based on the dimensions\r\n  const colorScaling: ColorScaling = {\r\n    hue: 6,\r\n    lightness: 3,\r\n    saturation: 4\r\n  };\r\n\r\n  // Because hue and lightness are on diagonals, check against the number of rows *or* columns\r\n  if (cellRows <= 8 || cellColumns <= 8) {\r\n    colorScaling.hue *= 1.5;\r\n    colorScaling.lightness *= 1.5;\r\n  }\r\n  \r\n  // Because saturation is solely an up/down scale, check against the number of rows\r\n  if (cellRows <= 8) {\r\n    colorScaling.saturation *= 1.5;\r\n  }\r\n\r\n  // Generate the state and log\r\n  const state: HexGridState = {\r\n    screenDimensions: {\r\n      height: screenHeight,\r\n      width: screenWidth\r\n    },\r\n    gridDimensions: {\r\n      height: cellRows,\r\n      width: cellColumns\r\n    },\r\n    cellDimensions: {\r\n      height: cellHeight,\r\n      width: cellWidth\r\n    },\r\n    cellPointsString: getCornerPointsString(hexFactory),\r\n    baseHexSize,\r\n    centerCoord,\r\n    centerCoordCube,\r\n    colorScaling\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    console.debug(`Calculated dimensions`, { screen: state.screenDimensions, grid: state.gridDimensions, cell: state.cellDimensions });\r\n  }\r\n  \r\n  return state;\r\n}\r\n\r\nexport const hexGridSlice = createSlice({\r\n  name: 'hexGrid',\r\n  initialState: getStateForScreen(),\r\n  reducers: {\r\n    resize: (state) => {\r\n      const newState = getStateForScreen();\r\n\r\n      state.screenDimensions = newState.screenDimensions;\r\n      state.gridDimensions = newState.gridDimensions;\r\n      state.cellDimensions = newState.cellDimensions;\r\n      state.cellPointsString = newState.cellPointsString;\r\n      state.centerCoord = newState.centerCoord;\r\n      state.baseHexSize = newState.baseHexSize;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { resize } = hexGridSlice.actions;\r\nexport default hexGridSlice.reducer;\r\n\r\n/**\r\n * Generates a hex grid using the specified dimensions, center hex coordinate, and size of each hex.\r\n * @param gridDimensions The grid dimensions to use.\r\n * @param centerCoord The coordinate of the center hex element.\r\n * @param baseHexSize The base size, in pixels, of each hexagon.\r\n * @returns A hex grid. The \"center\" hex element will be the last item in the collection.\r\n */\r\nexport const selectGridHexes = (gridDimensions: Size, centerCoord: PointLike, baseHexSize: number) => {\r\n  // Construct the hex/grid factories\r\n  const hexFactory = getHexFactory(baseHexSize);\r\n\r\n  const gridFactory = defineGrid(hexFactory);\r\n\r\n  // Generate the equivalent hexes\r\n  const gridHexes = gridFactory.rectangle({\r\n    width: gridDimensions.width,\r\n    height: gridDimensions.height\r\n  });\r\n\r\n  // Extract the center item from the list and put it at the end so it gets SVG rendering priority\r\n  const centerIndex = gridHexes.indexOf(centerCoord);\r\n\r\n  if (centerIndex !== -1) {\r\n    const centerHex = gridHexes.splice(centerIndex, 1)[0];\r\n    gridHexes.push(centerHex);\r\n  }\r\n\r\n  return gridHexes;\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport colorReducer from './state/colorSlice';\r\nimport hexGridReducer from './state/hexGridSlice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    color: colorReducer,\r\n    hexGrid: hexGridReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\n/**\r\n * Scales a numeric value from one range to another.\r\n * @param fromValue The source value to scale.\r\n * @param fromRange The minimum/maximum expected range of the source value.\r\n * @param toRange The minimum/maximum range of the destination value.\r\n * @returns The resulting scaled value.\r\n */\r\nexport function scaleNumericValue(fromValue: number, fromRange: [number, number], toRange: [number, number]): number {\r\n  const scalingFactor = (toRange[1] - toRange[0]) / (fromRange[1] - fromRange[0]);\r\n  const valueInRange = Math.min(fromRange[1], Math.max(fromRange[0], fromValue)) - fromRange[0];\r\n\r\n  return toRange[0] + (valueInRange * scalingFactor);\r\n}\r\n\r\n/**\r\n * Clamps a numeric value into a specific range.\r\n * @param value The value to clamp.\r\n * @param minimum The minimum value in the range.\r\n * @param maximum The maximum value in the range.\r\n * @returns The clamped value.\r\n */\r\nexport function clamp(value: number, minimum: number, maximum: number) {\r\n  return Math.max(minimum, Math.min(maximum, value));\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import { useMemo } from 'react';\r\nimport { Hex } from 'honeycomb-grid';\r\n\r\nimport { clamp } from '../store';\r\nimport { useAppSelector } from '../hooks';\r\n\r\nfunction Cell(props: { hex: Hex<any> }): JSX.Element {\r\n  // const gridDimensions = useAppSelector((state) => state.hexGrid.gridDimensions);\r\n  // const cellDimensions = useAppSelector((state) => state.hexGrid.cellDimensions); // Only used for debugging\r\n  const centerCoord = useAppSelector((state) => state.hexGrid.centerCoord);\r\n  const centerCoordCube = useAppSelector((state) => state.hexGrid.centerCoordCube);\r\n  const pointString = useAppSelector((state) => state.hexGrid.cellPointsString);\r\n  const colorScaling = useAppSelector((state)  => state.hexGrid.colorScaling);\r\n  const baseHue = useAppSelector((state) => state.color.hue);\r\n  const baseSaturation = useAppSelector((state) => state.color.saturation);\r\n  const baseLightness = useAppSelector((state) => state.color.lightness); \r\n\r\n  // Scale hue along the cubic \"q\" dimension (upper-left to lower-right)\r\n  const scaledHue = useMemo(() => {\r\n    // We *DON'T* want to clamp this value, unlike the others, because hue is cyclical\r\n    return baseHue - (colorScaling.hue * (props.hex.q - centerCoordCube.q));\r\n  }, [baseHue, colorScaling, centerCoordCube, props.hex]);\r\n\r\n  // Scale saturation along the cubic \"s\" dimension (up to down)\r\n  const scaledSaturation = useMemo(() => {\r\n    return clamp(baseSaturation + (colorScaling.saturation * (props.hex.s - centerCoordCube.s)), 0, 100);\r\n  }, [baseSaturation, colorScaling, centerCoordCube, props.hex]);\r\n\r\n  // Scale lightness along the cubic \"r\" dimension in reverse (lower-left to upper-right)\r\n  const scaledLightness = useMemo(() => {\r\n    return clamp(baseLightness - (colorScaling.lightness * (props.hex.r - centerCoordCube.r)), 0, 100);\r\n  }, [baseLightness, colorScaling, centerCoordCube, props.hex]);\r\n\r\n  const scaledColorString = useMemo(() => {\r\n    return `hsl(${scaledHue}, ${scaledSaturation}%, ${scaledLightness}%)`;\r\n  }, [scaledHue, scaledSaturation, scaledLightness]);\r\n\r\n  let stroke = scaledColorString;\r\n\r\n  // Change the stroke based on whether this is the \"central\" hex\r\n  let strokeWidth = 1;\r\n  let strokeOpacity = 0.15;\r\n\r\n  if (props.hex.equals(centerCoord)) {\r\n    strokeWidth = 2;\r\n    strokeOpacity = 0.5;\r\n    stroke = 'black';\r\n  }\r\n\r\n  // Use x/y coords to translate the polygon\r\n  const {x, y} = props.hex.toPoint();\r\n  const transform = `translate(${x}, ${y})`;\r\n\r\n  return (\r\n    <g\r\n      transform={transform}\r\n    >\r\n      <polygon\r\n        points={pointString}\r\n        fill={scaledColorString}\r\n        stroke={stroke}\r\n        strokeOpacity={strokeOpacity}\r\n        strokeWidth={strokeWidth}\r\n      />\r\n      {/* Only include debugging information in dev builds */}\r\n      {/* {process.env.NODE_ENV !== 'production'\r\n        &&\r\n        <text\r\n          fill=\"#fff\"\r\n          x={cellDimensions.width / 2}\r\n          y={cellDimensions.height / 2}\r\n          textAnchor=\"middle\"\r\n          dominantBaseline=\"middle\"\r\n          textLength={cellDimensions.width * 0.66}\r\n        >\r\n          {props.hex.q}, {props.hex.r}, {props.hex.s}\r\n        </text>} */}\r\n    </g> \r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","import { useMemo } from \"react\";\r\nimport { Hex } from \"honeycomb-grid\";\r\n\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { selectGridHexes } from \"../state/hexGridSlice\";\r\n\r\nimport Cell from './Cell';\r\n\r\n/**\r\n * Generates a key for the provided hex element.\r\n * @param hex The hex element.\r\n * @returns The key for the hex.\r\n */\r\n function hexToKey(hex: Hex<any>): string {\r\n  // Use the QRS cubic coordinates to map this\r\n  return `${hex.q}~${hex.r}~${hex.s}`;\r\n}\r\n\r\nfunction Grid(): JSX.Element {\r\n  const screenDimensions = useAppSelector((state) => state.hexGrid.screenDimensions);\r\n  const gridDimensions = useAppSelector((state) => state.hexGrid.gridDimensions);\r\n  const cellDimensions = useAppSelector((state) => state.hexGrid.cellDimensions);\r\n  const centerCoord = useAppSelector((state) => state.hexGrid.centerCoord);\r\n  const baseHexSize = useAppSelector((state) => state.hexGrid.baseHexSize);\r\n\r\n  // Map each cell to a discrete component.\r\n  const cellHexes = useMemo(\r\n    () => {\r\n      return selectGridHexes(gridDimensions, centerCoord, baseHexSize);\r\n    },\r\n    [gridDimensions, centerCoord, baseHexSize]);\r\n\r\n  const cellElements = useMemo(\r\n    () => {\r\n      return cellHexes.map((hex) => {\r\n          return <Cell\r\n            key={hexToKey(hex)}\r\n            hex={hex}\r\n          />\r\n        });\r\n    },\r\n    [cellHexes]);\r\n\r\n  // The center hex element will be last in the collection.\r\n  // Shift the SVG up and to the left until the center of that hex matches the center of the screen.\r\n  const centerHexPoint = cellHexes[cellHexes.length - 1].toPoint();\r\n  let verticalOffset = (screenDimensions.height / 2) - centerHexPoint.y - (cellDimensions.height / 2);\r\n  let horizontalOffset = (screenDimensions.width / 2) - centerHexPoint.x - (cellDimensions.width / 2);\r\n\r\n  const style: React.CSSProperties = {\r\n    position: 'relative' as const,\r\n    left: horizontalOffset,\r\n    top: verticalOffset,\r\n    overflow: 'visible',\r\n    userSelect: 'none'\r\n  };\r\n\r\n  return (\r\n    <svg\r\n      style={style}\r\n    >\r\n      {cellElements}\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import { scaleNumericValue, clamp } from './store';\r\n\r\ntype ChordSemitones = [root: number, third: number, fifth: number, seventh: number];\r\n\r\nconst MajorTriadSemitones: ChordSemitones = [0, 4, 7, 0];\r\nconst MinorTriadSemitones: ChordSemitones = [0, 3, 7, 0];\r\nconst AugmentedTriadSemitones: ChordSemitones = [0, 4, 8, 0];\r\nconst DiminishedTriadSemitones: ChordSemitones = [0, 3, 6, 0];\r\n\r\nconst DominantSeventhSemitones: ChordSemitones = [0, 4, 7, 10];\r\nconst MajorSeventhSemitones: ChordSemitones = [0, 4, 7, 11];\r\nconst MinorSeventhSemitones: ChordSemitones = [0, 3, 7, 10];\r\n// const HalfDiminishedSeventhSemitones: ChordSemitones = [0, 3, 6, 10];\r\n// const DiminishedSeventhSemitones: ChordSemitones = [0, 3, 6, 9];\r\n\r\nconst DefaultSemitones: ChordSemitones = MajorTriadSemitones;\r\n\r\ntype MajorTriadScaleChords = 'I Maj' | 'II min' | 'III min' | 'IV Maj' | 'V Maj' | 'VI min' | 'VII dim';\r\ntype MinorTriadScaleChords = 'I min' | 'II dim' | 'bIII Aug' | 'IV min' | 'bVI Maj' | 'bVII Maj' | 'VII dim' | 'III Maj';\r\ntype DominantSeventhScaleChords = 'I7' | 'II7' | 'III7' | 'IV7' | 'V7' | 'VI7' | 'VII7';\r\ntype MajorSeventhScaleChords = 'I Maj7' | 'II Maj7' | 'III Maj7' | 'IV Maj7' | 'V Maj7' | 'VI Maj7' | 'VII Maj7';\r\ntype MinorSeventhScaleChords = 'I min7' | 'II min7' | 'III min7' | 'IV min7' | 'V min7' | 'VI min7' | 'VII min7';\r\n// type HalfDiminishedSeventhScaleChords = 'I min7b5' | 'II min7b5' | 'III min7b5' | 'IV min7b5' | 'V min7b5' | 'VI min7b5' | 'VII min7b5';\r\n// type DiminishedSeventhScaleChords = 'I dim7' | 'II dim7' | 'III dim7' | 'IV dim7' | 'V dim7' | 'VI dim7' | 'VII dim7';\r\n\r\ntype Chord = MajorTriadScaleChords | MinorTriadScaleChords | DominantSeventhScaleChords | MajorSeventhScaleChords | MinorSeventhScaleChords;\r\n\r\n/**\r\n * Maps specific chords to the number of semitones from the root/\"base\" frequency as well as the chord-specific semitones.\r\n */\r\nconst ChordTones: { [chord in Chord]: [number, ChordSemitones]  } = {\r\n  // Start with the major scale\r\n  'I Maj':    [0,   MajorTriadSemitones],\r\n  'II min':   [2,   MinorTriadSemitones],\r\n  'III min':  [4,   MinorTriadSemitones],\r\n  'IV Maj':   [5,   MajorTriadSemitones],\r\n  'V Maj':    [7,   MajorTriadSemitones],\r\n  'VI min':   [9,   MinorTriadSemitones],\r\n  'VII dim':  [11,  DiminishedTriadSemitones],\r\n  // Add the minor scale\r\n  'I min':    [0,   MinorTriadSemitones],\r\n  'II dim':   [2,   DiminishedTriadSemitones],\r\n  'bIII Aug': [3,   AugmentedTriadSemitones],\r\n  'IV min':   [5,   MinorTriadSemitones],\r\n  'bVI Maj':  [8,   MajorTriadSemitones],\r\n  'bVII Maj': [10,  MajorTriadSemitones],\r\n  'III Maj':  [4,   MajorTriadSemitones],\r\n  // Add the dominant seventh scale\r\n  'I7':       [0,   DominantSeventhSemitones],\r\n  'II7':      [2,   DominantSeventhSemitones],\r\n  'III7':     [4,   DominantSeventhSemitones],\r\n  'IV7':      [5,   DominantSeventhSemitones],\r\n  'V7':       [7,   DominantSeventhSemitones],\r\n  'VI7':      [9,   DominantSeventhSemitones],\r\n  'VII7':     [11,  DominantSeventhSemitones],\r\n  // Add the major seventh scale\r\n  'I Maj7':   [0,   MajorSeventhSemitones],\r\n  'II Maj7':  [2,   MajorSeventhSemitones],\r\n  'III Maj7': [4,   MajorSeventhSemitones],\r\n  'IV Maj7':  [5,   MajorSeventhSemitones],\r\n  'V Maj7':   [7,   MajorSeventhSemitones],\r\n  'VI Maj7':  [9,   MajorSeventhSemitones],\r\n  'VII Maj7': [11,  MajorSeventhSemitones],\r\n  // Add the minor seventh scale\r\n  'I min7':   [0,   MinorSeventhSemitones],\r\n  'II min7':  [2,   MinorSeventhSemitones],\r\n  'III min7': [4,   MinorSeventhSemitones],\r\n  'IV min7':  [5,   MinorSeventhSemitones],\r\n  'V min7':   [7,   MinorSeventhSemitones],\r\n  'VI min7':  [9,   MinorSeventhSemitones],\r\n  'VII min7': [11,  MinorSeventhSemitones],\r\n};\r\n\r\n/**\r\n * Maps individual named chord progressions to specific lists of chords.\r\n */\r\nconst ChordProgressions: { [name: string]: Chord[] } = {\r\n  'Awesome-1': ['I Maj', 'V Maj', 'VI min', 'IV Maj'],\r\n  'Awesome-2': ['V Maj', 'VI min', 'IV Maj', 'I Maj'],\r\n  'Awesome-3': ['VI min', 'IV Maj', 'I Maj', 'V Maj'],\r\n  'Awesome-4': ['IV Maj', 'I Maj', 'V Maj', 'VI min'],\r\n  'Awesome-5': ['I Maj', 'V Maj', 'bVII Maj', 'IV Maj'],\r\n  'Awesome-6': ['I Maj', 'IV Maj', 'bVII Maj', 'IV Maj'],\r\n  'Fifties': ['I Maj', 'VI min', 'IV Maj', 'V Maj'],\r\n  'Circle': ['VI min', 'II min', 'V Maj', 'I Maj'],\r\n  'Three-Chord-1': ['V Maj', 'I Maj', 'IV Maj'],\r\n  'Three-Chord-2': ['I Maj', 'V Maj', 'IV Maj', 'V Maj'],\r\n  'Three-Chord-3': ['V Maj', 'IV Maj', 'I Maj'],\r\n  'Three-Chord-4': ['I Maj', 'VI min', 'V Maj'],\r\n  'Three-Chord-5': ['I Maj', 'II min', 'V Maj'],\r\n  'Pachelbel': ['I Maj', 'V Maj', 'VI min', 'III min', 'IV Maj', 'I Maj', 'IV Maj', 'V Maj'],\r\n  'Royal': ['IV Maj7', 'V7', 'III min7', 'VI min'],\r\n  'Royal-Extended': ['IV Maj7', 'V7', 'III min7', 'VI min', 'II min7', 'V7', 'I Maj'],\r\n  'MontyWard': ['I7', 'IV7', 'II min7', 'V7']\r\n};\r\n\r\nconst AllProgressions: string[] = Object.keys(ChordProgressions);\r\n\r\n/**\r\n * Describes a collection of waveform-specific nodes, all of a particular type.\r\n */\r\ninterface WaveformNodes<NodeType extends AudioNode> {\r\n  square: NodeType;\r\n  \r\n  sawtooth: NodeType;\r\n  \r\n  sine: NodeType;\r\n}\r\n\r\n/**\r\n * Describes the chain of audio nodes for implementing output at a specific frequency.\r\n */\r\ninterface FrequencyOscillatorChain {\r\n  /**\r\n   * The waveform-specific oscillator nodes.\r\n   * The frequencies are adjusted based on the lightness.\r\n   */\r\n  oscillators: WaveformNodes<OscillatorNode>;\r\n\r\n  /**\r\n   * The waveform-specific gain nodes.\r\n   * The gains are adjusted based on the hue.\r\n   */\r\n  oscillatorGains: WaveformNodes<GainNode>;\r\n\r\n  /**\r\n   * The final output node.\r\n   * For chord frequencies, the gain is adjusted based on the saturation.\r\n   */\r\n  output: GainNode;\r\n}\r\n\r\n/**\r\n * Describes the chain of audio nodes for implementing a variable LFO.\r\n */\r\ninterface LfoChain {\r\n  /**\r\n   * The waveform oscillator.\r\n   */\r\n  oscillator: OscillatorNode;\r\n\r\n  /**\r\n   * The gain node used to weight how much the LFO is \"on\".\r\n   * Together with the constantGain, should have a total gain of 1.0.\r\n   */\r\n  oscillatorGain: GainNode;\r\n\r\n  /**\r\n   * The gain node used to weight how much the LFO is \"off\".\r\n   * Together with the oscillatorGain, should have a total gain of 1.0.\r\n   */\r\n  constantGain: GainNode;\r\n\r\n  /**\r\n   * The final output node whose gain is varied based on the LFO.\r\n   */\r\n  lfoOutput: GainNode;\r\n}\r\n\r\n/**\r\n * Describes the chain of audio nodes for implementing a variable reverb.\r\n */\r\ninterface ReverbChain {\r\n  /**\r\n   * The convolver node for applying reverb.\r\n   */\r\n  reverbConvolver: ConvolverNode;\r\n\r\n  /**\r\n   * The gain node used to weight how much the reverb is \"on\".\r\n   * Together with the dryGain, should have a total gain of 1.0.\r\n   */\r\n  wetGain: GainNode;\r\n\r\n  /**\r\n   * The gain node used to weight how much the reverb is \"off\".\r\n   * Together with the wetGain, should have a total gain of 1.0.\r\n   */\r\n  dryGain: GainNode;\r\n\r\n  /**\r\n   * The final output node combining both \"wet\" and \"dry\" signals.\r\n   */\r\n  reverbOutput: ChannelMergerNode;\r\n}\r\n\r\n/**\r\n * Creates a batch of waveform-specific oscillator nodes.\r\n * @param context The audio context to use.\r\n * @param semitones The number of semitones to detune the oscillators by. Optional.\r\n * @returns The resulting waveform-specific oscillator nodes.\r\n */\r\nfunction createOscillators(context: AudioContext, semitones: number | undefined = undefined): WaveformNodes<OscillatorNode> {\r\n  const square = new OscillatorNode(context, { type: 'square' });\r\n  const sawtooth = new OscillatorNode(context, { type: 'sawtooth' });\r\n  const sine = new OscillatorNode(context, { type: 'sine' });\r\n\r\n  square.frequency.setValueAtTime(440, context.currentTime);\r\n  sawtooth.frequency.setValueAtTime(440, context.currentTime);\r\n  sine.frequency.setValueAtTime(440, context.currentTime);\r\n\r\n  if (semitones !== undefined && semitones !== 0) {\r\n    square.detune.setValueAtTime(100 * semitones, context.currentTime);\r\n    sawtooth.detune.setValueAtTime(100 * semitones, context.currentTime);\r\n    sine.detune.setValueAtTime(100 * semitones, context.currentTime);\r\n  }\r\n\r\n  return {\r\n    square,\r\n    sawtooth,\r\n    sine\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a batch of gain nodes for specific waveform oscillators.\r\n * @param context The audio context to use.\r\n * @param oscillators The waveform-specific oscillator nodes to use.\r\n * @returns The resulting oscillator-specific gain nodes.\r\n */\r\nfunction createOscillatorGains(context: AudioContext, oscillators: WaveformNodes<OscillatorNode>): WaveformNodes<GainNode> {\r\n  const square = new GainNode(context);\r\n  const sawtooth = new GainNode(context);\r\n  const sine = new GainNode(context);\r\n\r\n  // Set the gain\r\n  square.gain.setValueAtTime(1, context.currentTime);\r\n  sawtooth.gain.setValueAtTime(1, context.currentTime);\r\n  sine.gain.setValueAtTime(1, context.currentTime);\r\n\r\n  // Wire the oscillators up to the corresponding gain nodes\r\n  oscillators.square.connect(square);\r\n  oscillators.sawtooth.connect(sawtooth);\r\n  oscillators.sine.connect(sine);\r\n\r\n  return {\r\n    square,\r\n    sawtooth,\r\n    sine\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a merger for a collection of oscillator-specific gain nodes.\r\n * @param context The audio context to use.\r\n * @param oscillatorGains The oscillator-specific gain nodes to use.\r\n * @returns The resulting channel merger.\r\n */\r\nfunction createOscillatorsMixer(context: AudioContext, oscillatorGains: WaveformNodes<GainNode>): ChannelMergerNode {\r\n  const merger = new ChannelMergerNode(context, { numberOfInputs: 3, channelCount: 1 });\r\n\r\n  // Wire the gain nodes for the oscillators into the merger\r\n  oscillatorGains.square.connect(merger);\r\n  oscillatorGains.sawtooth.connect(merger);\r\n  oscillatorGains.sine.connect(merger);\r\n\r\n  return merger;\r\n}\r\n\r\n/**\r\n * Creates an oscillator structure for one output frequency, culminating in a final gain node.\r\n * @param context The audio context to use.\r\n * @param semitones The number of semitones to detune the oscillators by. Optional.\r\n * @returns The resulting oscillator structure.\r\n */\r\nfunction createOscillatorStructure(context: AudioContext, semitones: number | undefined = undefined): FrequencyOscillatorChain {\r\n  const oscillators = createOscillators(context, semitones);\r\n  const oscillatorGains = createOscillatorGains(context, oscillators);\r\n  const oscillatorsMixer = createOscillatorsMixer(context, oscillatorGains);\r\n\r\n  const output = new GainNode(context);\r\n  oscillatorsMixer.connect(output);\r\n\r\n  return {\r\n    oscillators,\r\n    oscillatorGains,\r\n    output\r\n  };\r\n}\r\n\r\n/**\r\n * Creates an LFO structure, culminating in a final gain node that can be used to modulate the output.\r\n * @param context The audio context to use.\r\n * @param frequency The frequency to use for the LFO.\r\n * @param gain The gain to use for the variable portion of the LFO.\r\n * @returns The resulting LFO chain.\r\n */\r\nfunction createLfoStructure(context: AudioContext, frequency: number, gain: number): LfoChain {\r\n  // Start with the oscillator\r\n  const oscillator = new OscillatorNode(context, { type: 'sine' });\r\n  oscillator.frequency.setValueAtTime(frequency, context.currentTime);\r\n\r\n  // Feed that into a variable gain node for when the LFO is \"on\"\r\n  const oscillatorGain = new GainNode(context);\r\n  oscillator.connect(oscillatorGain);\r\n\r\n  // Create a constant gain node for when the LFO is \"off\"\r\n  const constantSource = new ConstantSourceNode(context);\r\n  const constantGain = new GainNode(context);\r\n  constantSource.connect(constantGain);\r\n\r\n  // Combine the on/off channels\r\n  const gainMixer = new ChannelMergerNode(context, { numberOfInputs: 2, channelCount: 1 });\r\n  oscillatorGain.connect(gainMixer);\r\n  constantGain.connect(gainMixer);\r\n\r\n  // Connect the the mixed LFO output to the final output node\r\n  const lfoOutput = new GainNode(context);\r\n  gainMixer.connect(lfoOutput.gain);\r\n\r\n  // Make sure the wet/dry balance is configured\r\n  setWetDryBalance(oscillatorGain, constantGain, gain, context.currentTime);\r\n\r\n  return {\r\n    oscillator,\r\n    oscillatorGain,\r\n    constantGain,\r\n    lfoOutput\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a reverb structure that supports variable gain.\r\n * @param context The audio context to use.\r\n * @param gain The gain to use for the reverb.\r\n * @param input The incoming audio to reverb.\r\n * @returns The resulting reverb chain.\r\n */\r\nfunction createReverbStructure(context: AudioContext, gain: number, input: AudioNode): ReverbChain {\r\n  // Create a reverb node - the buffer will be set up later\r\n  const reverbConvolver = new ConvolverNode(context);\r\n\r\n  // Create a gain node for when reverb is being used\r\n  const wetGain = new GainNode(context);\r\n  reverbConvolver.connect(wetGain);\r\n\r\n  // Create a gain node for when reverb is *not* being used\r\n  const dryGain = new GainNode(context);\r\n\r\n  // Combine the reverb nodes in a mixer\r\n  const reverbOutput = new ChannelMergerNode(context, { numberOfInputs: 2, channelCount: 1});\r\n  wetGain.connect(reverbOutput);\r\n  dryGain.connect(reverbOutput);\r\n\r\n  // Ensure the input node feeds into both the convolver and the \"dry\" gain\r\n  input.connect(reverbConvolver);\r\n  input.connect(dryGain);\r\n\r\n  // Make sure the wet/dry balance is configured\r\n  setWetDryBalance(wetGain, dryGain, gain, context.currentTime);\r\n\r\n  return {\r\n    reverbConvolver,\r\n    wetGain,\r\n    dryGain,\r\n    reverbOutput\r\n  }\r\n}\r\n\r\n/**\r\n * Starts all oscillator nodes in the provided chains.\r\n * @param chains The chains containing the oscillator nodes.\r\n */\r\nfunction startOscillators(...chains: (FrequencyOscillatorChain | null)[]): void {\r\n  for (let chain of chains) {\r\n    // Skip over nulls\r\n    if (chain === null) {\r\n      continue;\r\n    }\r\n\r\n    chain.oscillators.square.start();\r\n    chain.oscillators.sawtooth.start();\r\n    chain.oscillators.sine.start();\r\n  }\r\n}\r\n\r\n/**\r\n * Assigns a periodic wave to all oscillator nodes of a particular type.\r\n * @param context The audio context to use.\r\n * @param wavetableJson The JSON for the wavetable.\r\n * @param type The type of oscillator nodes to update.\r\n * @param chains The chains containing the oscillator nodes.\r\n */\r\nfunction assignWaveformTable(context: AudioContext | null, wavetableJson: any, type: 'square' | 'sawtooth' | 'sine', ...chains: (FrequencyOscillatorChain | null)[]): void {\r\n  // Make sure we have a context\r\n  if (context === null) {\r\n    return;\r\n  }\r\n\r\n  // Make sure we have JSON\r\n  if (!wavetableJson || !Array.isArray(wavetableJson['real']) || !Array.isArray(wavetableJson['imag'])) {\r\n    return;\r\n  }\r\n\r\n  // Build the wavetable from the specified JSON\r\n  const wave = new PeriodicWave(context, { real: wavetableJson['real'], imag: wavetableJson['imag'] });\r\n\r\n  for (let chain of chains) {\r\n    // Skip over nulls\r\n    if (chain === null) {\r\n      continue;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'square':\r\n        chain.oscillators.square.setPeriodicWave(wave);\r\n        break;\r\n\r\n      case 'sawtooth':\r\n        chain.oscillators.sawtooth.setPeriodicWave(wave);\r\n        break;\r\n\r\n      case 'sine':\r\n        chain.oscillators.sine.setPeriodicWave(wave);\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Updates all oscillator nodes in the provided chains to use the specified frequency.\r\n * @param frequency The frequency to use.\r\n * @param atTime The time at which to assign the frequency.\r\n * @param cancelSchedules If true, will cancel other changes scheduled for the frequency value.\r\n * @param chains The chains containing the oscillator nodes to update.\r\n */\r\nfunction assignWaveformFrequency(frequency: number, atTime: number, cancelSchedules: boolean, ...chains: (FrequencyOscillatorChain | null)[]): void {\r\n  for (let chain of chains) {\r\n    // Skip over nulls\r\n    if (chain === null) {\r\n      continue;\r\n    }\r\n\r\n    // Cancel scheduled frequency changes if specified\r\n    if (cancelSchedules) {\r\n      chain.oscillators.square.frequency.cancelScheduledValues(atTime);\r\n      chain.oscillators.sawtooth.frequency.cancelScheduledValues(atTime);\r\n      chain.oscillators.sine.frequency.cancelScheduledValues(atTime);\r\n    }\r\n\r\n    chain.oscillators.square.frequency.setValueAtTime(frequency, atTime);\r\n    chain.oscillators.sawtooth.frequency.setValueAtTime(frequency, atTime);\r\n    chain.oscillators.sine.frequency.setValueAtTime(frequency, atTime);\r\n  }\r\n}\r\n\r\n/**\r\n * Updates all oscillator nodes in the provided chains to use the specified detune value.\r\n * @param detune The detune amount to use, in cents of a semitone.\r\n * @param atTime The time at which to assign the detune value.\r\n * @param cancelSchedules If true, will cancel other changes scheduled for the detune value.\r\n * @param chains The chains containing the oscillator nodes to update.\r\n */\r\nfunction assignWaveformDetune(detune: number, atTime: number, cancelSchedules: boolean, ...chains: (FrequencyOscillatorChain | null)[]): void {\r\n  for (let chain of chains) {\r\n    // Skip over nulls\r\n    if (chain === null) {\r\n      continue;\r\n    }\r\n\r\n    // Cancel scheduled detunes if specified\r\n    if (cancelSchedules) {\r\n      chain.oscillators.square.detune.cancelScheduledValues(atTime);\r\n      chain.oscillators.sawtooth.detune.cancelScheduledValues(atTime);\r\n      chain.oscillators.sine.detune.cancelScheduledValues(atTime);\r\n    }\r\n\r\n    chain.oscillators.square.detune.setValueAtTime(detune, atTime);\r\n    chain.oscillators.sawtooth.detune.setValueAtTime(detune, atTime);\r\n    chain.oscillators.sine.detune.setValueAtTime(detune, atTime);\r\n  }\r\n}\r\n\r\n/**\r\n * Updates all waveform-specific gain nodes in the provided chains to use the indicated waveform-specific gain levels.\r\n * @param square The gain level to use for square waveforms.\r\n * @param sawtooth The gain level to use for sawtooth waveforms.\r\n * @param sine The gain level to use for sine waveforms.\r\n * @param atTime The time at which to assign the gain levels.\r\n * @param chains The chains containing the oscillator nodes to update.\r\n */\r\nfunction assignWaveformGains(square: number, sawtooth: number, sine: number, atTime: number, ...chains: (FrequencyOscillatorChain | null)[]): void {\r\n  for (let chain of chains) {\r\n    // Skip over nulls\r\n    if (chain === null) {\r\n      continue;\r\n    }\r\n\r\n    chain.oscillatorGains.square.gain.setValueAtTime(square, atTime);\r\n    chain.oscillatorGains.sawtooth.gain.setValueAtTime(sawtooth, atTime);\r\n    chain.oscillatorGains.sine.gain.setValueAtTime(sine, atTime);\r\n  }\r\n}\r\n\r\n/**\r\n * Updates the provided pair of wet/dry gain nodes to reflect the specified \"wet\" gain.\r\n * @param wetNode The gain node controlling the \"wet\" processed signal.\r\n * @param dryNode The gain node controlling the \"dry\" unprocessed signal.\r\n * @param wetGain The amount of gain to apply to the \"wet\" signal, on a 0.0-1.0 scale.\r\n * @param atTime The time at which to assign the gain levels.\r\n */\r\nfunction setWetDryBalance(wetNode: GainNode, dryNode: GainNode, wetGain: number, atTime: number) {\r\n  wetNode.gain.setValueAtTime(wetGain, atTime);\r\n  dryNode.gain.setValueAtTime(1.0 - wetGain, atTime);\r\n}\r\n\r\n/**\r\n * Handles sound output based on an HSL color value and other configurable parameters.\r\n */\r\nexport class SoundManager {\r\n\r\n  /**\r\n   * Initializes a new instance of SoundManager.\r\n   * @param hue The initial hue value to use, on a 0-360 degree scale.\r\n   * @param saturation The initial saturation value to use, on a 0-100% scale.\r\n   * @param lightness The initial lightness value to use, on a 0-100% scale.\r\n   */\r\n  constructor(\r\n    private hue: number,\r\n    private saturation: number,\r\n    private lightness: number\r\n  ) {\r\n    // No body necessary\r\n  } \r\n\r\n  /**\r\n   * Tracks whether the overall audio processing structure has been initialized.\r\n   */\r\n  private structureInitialized: boolean = false;\r\n\r\n  /**\r\n   * The audio context to use.\r\n   */\r\n  private audioContext: AudioContext | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the root/\"base\" frequency.\r\n   */\r\n  private rootFrequencyChain: FrequencyOscillatorChain | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the third frequency.\r\n   */\r\n  private thirdFrequencyChain: FrequencyOscillatorChain | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the fifth frequency.\r\n   */\r\n  private fifthFrequencyChain: FrequencyOscillatorChain | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the seventh frequency.\r\n   */\r\n  private seventhFrequencyChain: FrequencyOscillatorChain | null = null;\r\n\r\n  /**\r\n   * The gain node used to start/stop all oscillator output, as oscillators cannot be re-started once stopped.\r\n   * This is used to provide discrete notes in chord progressions without.\r\n   */\r\n  private startStopGainNode: GainNode | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the LFO effect.\r\n   */\r\n  private lfoChain: LfoChain | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the reverb effect.\r\n   */\r\n  private reverbChain: ReverbChain | null = null;\r\n\r\n  /**\r\n   * The frequency that is used for the output volume.\r\n   */\r\n  private lfoFrequency: number = 15; // XXX: See if this can be better consolidated with the SoundInterface UI default\r\n\r\n  /**\r\n   * The gain level that is used for the LFO \"on\" gain node.\r\n   * The LFO \"off\" gain node is 1.0 minus this value.\r\n   */\r\n  private lfoGain: number = 0.25; // XXX: See if this can be better consolidated with the SoundInterface UI default\r\n \r\n   /**\r\n    * The gain level that is used for the reverb \"on\" gain node.\r\n    * The reverb \"off\" gain node is 1.0 minus this value.\r\n    */\r\n   private reverbGain: number = 0.0; // XXX: See if this can be better consolidated with the SoundInterface UI default\r\n\r\n  /**\r\n   * The final gain node that is used to control output volume.\r\n   */\r\n  private overallVolumeGainNode: GainNode | null = null;\r\n\r\n  /**\r\n   * The gain level that is used for the output volume.\r\n   */\r\n  private overallVolumeGain: number = 0.1; // XXX: See if this can be better consolidated with the SoundInterface UI default\r\n\r\n  /**\r\n   * Whether or not chord progression is enabled.\r\n   */\r\n  public isChordProgressionEnabled: boolean = false; // XXX: See if this can be better consolidated with the SoundInterface UI default\r\n\r\n  /**\r\n   * The time the next chord progression will end.\r\n   */\r\n  private nextChordProgressionEndTime: number = 0;\r\n\r\n  /**\r\n   * The base duration of each chord in a progression, measured in seconds.\r\n   */\r\n  private chordDurationSeconds = 2; // XXX: See if this can be better consolidated with the SoundInterface UI default\r\n\r\n  /**\r\n   * Initializes the structure for the audio processing, including all relevant oscillator nodes,\r\n   * but does not start the nodes.\r\n   */\r\n  private initializeAudioStructure(): void {\r\n    // Don't do this more than once\r\n    if (this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    if (this.audioContext === null) {\r\n      this.audioContext = new AudioContext();\r\n    }\r\n\r\n    // Set up the frequency chains\r\n    this.rootFrequencyChain = createOscillatorStructure(this.audioContext, DefaultSemitones[0]);\r\n    this.thirdFrequencyChain = createOscillatorStructure(this.audioContext, DefaultSemitones[1]);\r\n    this.fifthFrequencyChain = createOscillatorStructure(this.audioContext, DefaultSemitones[2]);\r\n    this.seventhFrequencyChain = createOscillatorStructure(this.audioContext, DefaultSemitones[3]);\r\n\r\n    // Create an overall mixer between the various frequency chains\r\n    const chainsMixer = new ChannelMergerNode(this.audioContext, { numberOfInputs: 3, channelCount: 1 });\r\n    this.rootFrequencyChain.output.connect(chainsMixer);\r\n    this.thirdFrequencyChain.output.connect(chainsMixer);\r\n    this.fifthFrequencyChain.output.connect(chainsMixer);\r\n    this.seventhFrequencyChain.output.connect(chainsMixer);\r\n\r\n    // Create a start/stop node\r\n    this.startStopGainNode = new GainNode(this.audioContext);\r\n    chainsMixer.connect(this.startStopGainNode);\r\n\r\n    // Create the LFO chain and ensure the start/stop node funnels into it\r\n    this.lfoChain = createLfoStructure(this.audioContext, this.lfoFrequency, this.lfoGain);\r\n    this.startStopGainNode.connect(this.lfoChain.lfoOutput);\r\n\r\n    // Feed the LFO output into the reverb structure\r\n    this.reverbChain = createReverbStructure(this.audioContext, this.reverbGain, this.lfoChain.lfoOutput);\r\n\r\n    // Create an overall gain node so that we can control final volume\r\n    this.overallVolumeGainNode = new GainNode(this.audioContext);\r\n    this.overallVolumeGainNode.gain.setValueAtTime(this.overallVolumeGain, this.audioContext.currentTime);\r\n\r\n    this.reverbChain.reverbOutput.connect(this.overallVolumeGainNode);\r\n    this.overallVolumeGainNode.connect(this.audioContext.destination);\r\n\r\n    // We're done!\r\n    this.structureInitialized = true;\r\n\r\n    // Switch oscillators over to use wavetables\r\n    fetch(process.env.PUBLIC_URL + '/assets/google/wavetable_08_Warm_Square')\r\n      .then((response) => response.json())\r\n      .then((tableJson) => {\r\n        assignWaveformTable(this.audioContext, tableJson, 'square', this.rootFrequencyChain, this.thirdFrequencyChain, this.fifthFrequencyChain, this.seventhFrequencyChain);\r\n      })\r\n      .catch((reason) => {\r\n        console.error('error retrieving square wavetable', reason);\r\n      });\r\n\r\n    fetch(process.env.PUBLIC_URL + '/assets/google/wavetable_06_Warm_Saw')\r\n      .then((response) => response.json())\r\n      .then((tableJson) => {\r\n        assignWaveformTable(this.audioContext, tableJson, 'sawtooth', this.rootFrequencyChain, this.thirdFrequencyChain, this.fifthFrequencyChain, this.seventhFrequencyChain);\r\n      })\r\n      .catch((reason) => {\r\n        console.error('error retrieving saw wavetable', reason);\r\n      });\r\n\r\n    fetch(process.env.PUBLIC_URL + '/assets/google/wavetable_Celeste')\r\n      .then((response) => response.json())\r\n      .then((tableJson) => {\r\n        assignWaveformTable(this.audioContext, tableJson, 'sine', this.rootFrequencyChain, this.thirdFrequencyChain, this.fifthFrequencyChain, this.seventhFrequencyChain);\r\n      })\r\n      .catch((reason) => {\r\n        console.error('error retrieving sine wavetable', reason);\r\n      });\r\n\r\n    // Ensure that we have an impulse response for the reverb\r\n    fetch(process.env.PUBLIC_URL + '/assets/google/impulse-responses_matrix-reverb6.wav')\r\n      .then((response) => response.arrayBuffer())\r\n      .then((buffer) => this.audioContext!.decodeAudioData(buffer))\r\n      .then((audioData) => {\r\n        if (this.reverbChain) {\r\n          this.reverbChain.reverbConvolver.buffer = audioData;\r\n        }\r\n      })\r\n      .catch((reason) => {\r\n        console.error('error retrieving reverb data', reason);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Cascades the current hue value to the oscillator-specific gain nodes in proportion to the corresponding red/blue/green values.\r\n   */\r\n  private cascadeHueToAudioNodes(): void {\r\n    // Don't do anything if we don't have an audio context yet\r\n    if (this.audioContext === null) {\r\n      return;\r\n    }\r\n\r\n    const SCALE_UP: [number, number] = [0.0, 1.0];\r\n    const SCALE_DOWN: [number, number] = [1.0, 0.0];\r\n    const PURE_RED = 0;\r\n    const PURE_YELLOW = 60;\r\n    const PURE_GREEN = 120;\r\n    const PURE_CYAN = 180;\r\n    const PURE_BLUE = 240;\r\n    const PURE_MAGENTA = 300;\r\n    const PURE_RED_WRAP = 360;\r\n\r\n    let redSquareComponent = 0;\r\n    let blueSineComponent = 0;\r\n    let greenSawComponent = 0;\r\n\r\n    // If this is perfectly divisible by 120, we're 100% in either red/green/blue.\r\n    // Similarly, if we're otherwise divisible by 60, we're at a 50/50 blend.\r\n    if (this.hue % 120 === 0) {\r\n      switch (this.hue) {\r\n        case PURE_GREEN:\r\n          greenSawComponent = 1;\r\n          break;\r\n\r\n        case PURE_BLUE:\r\n          blueSineComponent = 1;\r\n          break;\r\n\r\n        case PURE_RED:\r\n        case PURE_RED_WRAP:\r\n          redSquareComponent = 1;\r\n          break;\r\n      }\r\n    }\r\n    else if (this.hue % 60 === 0) {\r\n      switch (this.hue) {\r\n        case PURE_YELLOW:\r\n          redSquareComponent = 0.5;\r\n          greenSawComponent = 0.5;\r\n          break;\r\n\r\n        case PURE_CYAN:\r\n          greenSawComponent = 0.5;\r\n          blueSineComponent = 0.5;\r\n          break;\r\n\r\n        case PURE_MAGENTA:\r\n          blueSineComponent = 0.5;\r\n          redSquareComponent = 0.5;\r\n          break;\r\n      }\r\n    }\r\n    else {\r\n      // It's time to do this the hard way.\r\n      if (this.hue < PURE_GREEN) {\r\n        // Scale down from pure red and up to pure green\r\n        redSquareComponent = scaleNumericValue(this.hue, [PURE_RED, PURE_GREEN], SCALE_DOWN);\r\n        greenSawComponent = scaleNumericValue(this.hue, [PURE_RED, PURE_GREEN], SCALE_UP);\r\n      }\r\n      else if (this.hue < PURE_BLUE) {\r\n        // Scale down from pure green and up to pure blue\r\n        greenSawComponent = scaleNumericValue(this.hue, [PURE_GREEN, PURE_BLUE], SCALE_DOWN);\r\n        blueSineComponent = scaleNumericValue(this.hue, [PURE_GREEN, PURE_BLUE], SCALE_UP);\r\n      }\r\n      else if (this.hue < PURE_RED_WRAP) {\r\n        // Scale down from pure blue and up to pure red\r\n        blueSineComponent = scaleNumericValue(this.hue, [PURE_BLUE, PURE_RED_WRAP], SCALE_DOWN);\r\n        redSquareComponent = scaleNumericValue(this.hue, [PURE_BLUE, PURE_RED_WRAP], SCALE_UP);\r\n      }\r\n    }\r\n\r\n    // Cascade the components to the relevant nodes\r\n    assignWaveformGains(\r\n      redSquareComponent,\r\n      greenSawComponent,\r\n      blueSineComponent,\r\n      this.audioContext.currentTime,\r\n      this.rootFrequencyChain,\r\n      this.thirdFrequencyChain,\r\n      this.fifthFrequencyChain,\r\n      this.seventhFrequencyChain);\r\n  }\r\n\r\n  /**\r\n   * Cascades the current saturation value to the gain of all chord nodes.\r\n   */\r\n  private cascadeSaturationToAudioNodes(): void {\r\n    // Don't do anything if we don't have an audio context yet\r\n    if (this.audioContext === null) {\r\n      return;\r\n    }\r\n\r\n    // Apply the saturation as a gain value to all chord nodes\r\n    const chordGains = clamp(this.saturation, 0, 100) / 100.0;\r\n\r\n    this.thirdFrequencyChain?.output.gain.setValueAtTime(chordGains, this.audioContext!.currentTime);\r\n    this.fifthFrequencyChain?.output.gain.setValueAtTime(chordGains, this.audioContext!.currentTime);\r\n    this.seventhFrequencyChain?.output.gain.setValueAtTime(chordGains, this.audioContext!.currentTime);\r\n  }\r\n\r\n  /**\r\n   * Cascades the current lightness value to the frequency of all oscillator nodes.\r\n   */\r\n  private cascadeLightnessToAudioNodes(): void {\r\n    // Don't do anything if we don't have an audio context yet\r\n    if (this.audioContext === null) {\r\n      return;\r\n    }\r\n\r\n    // Apply the frequency value to all oscillator nodes\r\n    // Use a 2%-per-semitone scale to avoid the really aggravating frequencies\r\n    const semitoneDistance = scaleNumericValue(clamp(this.lightness, 0, 100), [0, 100], [-25, 25]);\r\n    const frequency = Math.pow(2, semitoneDistance/12) * 440;\r\n\r\n    assignWaveformFrequency(\r\n      frequency,\r\n      this.audioContext.currentTime,\r\n      false,\r\n      this.rootFrequencyChain,\r\n      this.thirdFrequencyChain,\r\n      this.fifthFrequencyChain,\r\n      this.seventhFrequencyChain);\r\n  }\r\n\r\n  /**\r\n   * Queues a chord progression and schedules the next time queueChordProgression should be called.\r\n   */\r\n  private queueChordProgression(): void {\r\n    // FUTURE: Consider restructuring this such that it will only schedule single chords, instead of full progressions.\r\n    // This would allow for changes in the chord duration to apply much sooner.\r\n\r\n    // Make sure we have audio context\r\n    if (this.audioContext === null || this.startStopGainNode === null || !this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    // If chord progression is disabled, restore everything to \"normal\" and don't try to re-queue\r\n    if (!this.isChordProgressionEnabled) {\r\n      // Ensure we're not trying to attack/decay/rest any notes.\r\n      this.startStopGainNode.gain.cancelScheduledValues(this.audioContext.currentTime);\r\n      this.startStopGainNode.gain.setValueAtTime(1, this.audioContext.currentTime);\r\n\r\n      // Assign the default semitones to all oscillator detunes and clear scheduled values.\r\n      assignWaveformDetune(DefaultSemitones[0] * 100, this.audioContext.currentTime, true, this.rootFrequencyChain);\r\n      assignWaveformDetune(DefaultSemitones[1] * 100, this.audioContext.currentTime, true, this.thirdFrequencyChain);\r\n      assignWaveformDetune(DefaultSemitones[2] * 100, this.audioContext.currentTime, true, this.fifthFrequencyChain);\r\n      assignWaveformDetune(DefaultSemitones[3] * 100, this.audioContext.currentTime, true, this.seventhFrequencyChain);\r\n\r\n      return;\r\n    }\r\n\r\n    const LOOKAHEAD_SEC = 0.25;\r\n    const LOOKAHEAD_MS = LOOKAHEAD_SEC * 1000;\r\n    const CHORD_DECAY_SEC = this.chordDurationSeconds / 8;\r\n    const REST_SEC = this.chordDurationSeconds / 16;\r\n\r\n    // See if there's anything we really want to bother with at this stage -\r\n    // if not, queue up a check later on\r\n    if (this.nextChordProgressionEndTime - LOOKAHEAD_SEC > this.audioContext.currentTime) {\r\n      setTimeout(() => { \r\n        this.queueChordProgression(); \r\n      }, LOOKAHEAD_MS);\r\n      return;\r\n    }\r\n\r\n    // Choose a random chord to play\r\n    const progressionIndex = Math.floor(Math.random() * AllProgressions.length);\r\n    const progressionName = AllProgressions[progressionIndex];\r\n    let chordsList = ChordProgressions[progressionName];\r\n    \r\n    // If the chord is short, double it\r\n    if (chordsList.length <= 3) {\r\n      chordsList = chordsList.concat(chordsList);\r\n    }\r\n\r\n    // Determine the jumping-off point - unless we're super behind, this will be when the last chord ended.\r\n    let currentTime = Math.max(this.nextChordProgressionEndTime, this.audioContext.currentTime);\r\n\r\n    // if (process.env.NODE_ENV !== 'production') {\r\n    //   console.debug(`playing ${progressionName}`);\r\n    // }\r\n\r\n    for(let chord of chordsList) {\r\n      // First ensure that the start/stop gain is set to \"start\" at the beginning of this progression\r\n      this.startStopGainNode.gain.linearRampToValueAtTime(1, currentTime);\r\n\r\n      // Pull the root semitones and the chord-specific tones\r\n      const [rootSemitones, chordTones] = ChordTones[chord];\r\n      assignWaveformDetune((rootSemitones + chordTones[0]) * 100, currentTime, false, this.rootFrequencyChain);\r\n      assignWaveformDetune((rootSemitones + chordTones[1]) * 100, currentTime, false, this.thirdFrequencyChain);\r\n      assignWaveformDetune((rootSemitones + chordTones[2]) * 100, currentTime, false, this.fifthFrequencyChain);\r\n      assignWaveformDetune((rootSemitones + chordTones[3]) * 100, currentTime, false, this.seventhFrequencyChain);\r\n\r\n      // Now move forward the clock by the chord's duration, and then decay the start/stop gain to \"stop\"\r\n      currentTime += this.chordDurationSeconds;\r\n      this.startStopGainNode.gain.setTargetAtTime(0, currentTime, CHORD_DECAY_SEC);\r\n\r\n      // Then advance past the decay and rest time to get to the start of the next chord\r\n      currentTime += CHORD_DECAY_SEC;\r\n      currentTime += REST_SEC;\r\n    }\r\n\r\n    // Add an end-of-progression pause that's half of a chord\r\n    currentTime += this.chordDurationSeconds / 2;\r\n\r\n    // Now update the marker to reflect the end of this chord progression\r\n    this.nextChordProgressionEndTime = currentTime;\r\n\r\n    // Queue up the next progression\r\n    setTimeout(() => {\r\n      this.queueChordProgression();\r\n    }, LOOKAHEAD_MS);\r\n  }\r\n\r\n  /**\r\n   * Begins playing audio.\r\n   */\r\n  public play(): void {\r\n    if (this.audioContext === null) {\r\n      this.audioContext = new AudioContext();\r\n      this.initializeAudioStructure();\r\n\r\n      this.cascadeHueToAudioNodes();\r\n      this.cascadeLightnessToAudioNodes();\r\n      this.cascadeSaturationToAudioNodes();\r\n\r\n      // Start all of the oscillators in the frequency chain\r\n      startOscillators(this.rootFrequencyChain, this.thirdFrequencyChain, this.fifthFrequencyChain, this.seventhFrequencyChain);\r\n\r\n      // Ensure the LFO chain is also initialized\r\n      if (this.lfoChain !== null) {\r\n        this.lfoChain.oscillator.start();\r\n      }\r\n    }\r\n\r\n    this.audioContext.resume();\r\n    this.queueChordProgression();\r\n  }\r\n\r\n  /**\r\n   * Pauses playing audio.\r\n   */\r\n  public pause(): void {\r\n    if (this.audioContext !== null) {\r\n      this.audioContext.suspend();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the audio qualities based on the provided hue.\r\n   * @param hue The hue to use.\r\n   */\r\n  public changeHue(hue: number): void {\r\n    this.hue = hue % 360;\r\n    this.cascadeHueToAudioNodes();\r\n  }\r\n\r\n  /**\r\n   * Updates the audio qualities based on the provided saturation.\r\n   * @param saturation The saturation to use.\r\n   */\r\n  public changeSaturation(saturation: number): void {\r\n    this.saturation = saturation;\r\n    this.cascadeSaturationToAudioNodes();\r\n  }\r\n\r\n  /**\r\n   * Updates the audio qualities based on the provided lightness.\r\n   * @param lightness The lightness to use.\r\n   */\r\n  public changeLightness(lightness: number): void {\r\n    this.lightness = lightness;\r\n    this.cascadeLightnessToAudioNodes();\r\n  }\r\n\r\n  /**\r\n   * Changes the audio volume.\r\n   * @param volume The new output volume, on a 0.0-1.0 scale.\r\n   */\r\n  public changeVolume(volume: number): void {\r\n    this.overallVolumeGain = clamp(volume, 0.0, 1.0);\r\n\r\n    // Don't do anything else if we don't have audio in place yet\r\n    if (this.audioContext === null || this.overallVolumeGainNode === null || !this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    this.overallVolumeGainNode.gain.setValueAtTime(this.overallVolumeGain, this.audioContext.currentTime);\r\n  }\r\n\r\n  /**\r\n   * Changes the reverb intensity.\r\n   * @param intensity The reverb intensity, on a 0.0-1.0 scale.\r\n   */\r\n   public changeReverbIntensity(intensity: number): void {\r\n    this.reverbGain = clamp(intensity, 0.0, 1.0);\r\n\r\n    // Don't do anything else if we don't have audio in place yet\r\n    if (this.audioContext === null || this.reverbChain === null || !this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    setWetDryBalance(this.reverbChain.wetGain, this.reverbChain.dryGain, this.reverbGain, this.audioContext.currentTime);\r\n  }\r\n\r\n  /**\r\n   * Changes the LFO intensity.\r\n   * @param intensity The LFO intensity, on a 0.0-1.0 scale.\r\n   */\r\n  public changeLfoIntensity(intensity: number): void {\r\n    this.lfoGain = clamp(intensity, 0.0, 1.0);\r\n\r\n    // Don't do anything else if we don't have audio in place yet\r\n    if (this.audioContext === null || this.lfoChain === null || !this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    setWetDryBalance(this.lfoChain.oscillatorGain, this.lfoChain.constantGain, this.lfoGain, this.audioContext.currentTime);\r\n  }\r\n\r\n  /**\r\n   * Changes the LFO frequency.\r\n   * @param frequency The LFO frequency, on a 1-30 Hz scale.\r\n   */\r\n  public changeLfoFrequency(frequency: number): void {\r\n    this.lfoFrequency = clamp(frequency, 1, 30);\r\n\r\n    // Don't do anything else if we don't have audio in place yet\r\n    if (this.audioContext === null || this.lfoChain === null || !this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    this.lfoChain.oscillator.frequency.setValueAtTime(this.lfoFrequency, this.audioContext.currentTime);\r\n  }\r\n\r\n  /**\r\n   * Changes whether automated chord progression is enabled.\r\n   * @param isEnabled Whether or not chord progression is enabled.\r\n   */\r\n  public changeChordProgression(isEnabled: boolean): void {\r\n    // See if we're materially changing. If so, queue up further checks.\r\n    if (this.isChordProgressionEnabled !== isEnabled) {\r\n      this.isChordProgressionEnabled = isEnabled;\r\n      this.queueChordProgression();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change the duration for further chords progression.\r\n   * @param durationSeconds The amount of time to spend on each chord, in seconds ranging from 0.25 to 10.\r\n   */\r\n  public changeChordDuration(durationSeconds: number): void {\r\n    this.chordDurationSeconds = clamp(durationSeconds, 0.25, 10);\r\n  }\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useAppSelector } from \"../hooks\";\r\n\r\nimport './SoundInterface.css';\r\nimport { SoundManager } from \"../soundManager\";\r\n\r\nfunction SoundInterface(): JSX.Element {\r\n  const mainHue = useAppSelector((state) => state.color.hue);\r\n  const mainSaturation = useAppSelector((state) => state.color.saturation);\r\n  const mainLightness = useAppSelector((state) => state.color.lightness);\r\n  const soundManager = useRef(new SoundManager(mainHue, mainSaturation, mainLightness));\r\n\r\n  const [isInterfaceExpanded, setInterfaceExpanded] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentVolume, setCurrentVolume] = useState(10);\r\n  const [currentReverbIntensity, setCurrentReverbIntensity] = useState(0);\r\n  const [currentLfoIntensity, setCurrentLfoIntensity] = useState(25);\r\n  const [currentLfoFrequency, setCurrentLfoFrequency] = useState(15);\r\n  const [isChordProgressionEnabled, setChordProgressionEnabled] = useState(false);\r\n  const [currentChordDuration, setChordDuration] = useState(2.0);\r\n\r\n  // Cascade color changes to the sound manager\r\n  useEffect(() => {\r\n    soundManager.current.changeHue(mainHue);\r\n  }, [mainHue]);\r\n\r\n  useEffect(() => {\r\n    soundManager.current.changeSaturation(mainSaturation);\r\n  }, [mainSaturation]);\r\n\r\n  useEffect(() => {\r\n    soundManager.current.changeLightness(mainLightness);\r\n  }, [mainLightness]);\r\n\r\n  // Prevent mousedown/touchstart events in this area from starting panning\r\n  const panInterceptor = (event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>): void => {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  const panelButtonClicked = (event: React.MouseEvent<HTMLButtonElement>): boolean => {\r\n    setInterfaceExpanded(!isInterfaceExpanded);\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    return false;\r\n  }\r\n\r\n  const playButtonClicked = (event: React.MouseEvent<HTMLButtonElement>): boolean => {\r\n    if (isPlaying) {\r\n      soundManager.current.pause();\r\n    }\r\n    else {\r\n      soundManager.current.play();\r\n    }\r\n\r\n    setIsPlaying(!isPlaying);\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    return false;\r\n  };\r\n\r\n  const volumeSliderChanged = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    const wholeVolume = parseInt((event.target as HTMLInputElement).value, 10);\r\n\r\n    setCurrentVolume(wholeVolume)\r\n    soundManager.current.changeVolume(wholeVolume / 100);\r\n  };\r\n\r\n  const reverbIntensityChanged = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    const wholeIntensity = parseInt((event.target as HTMLInputElement).value, 10);\r\n\r\n    setCurrentReverbIntensity(wholeIntensity)\r\n    soundManager.current.changeReverbIntensity(wholeIntensity / 100);\r\n  };\r\n\r\n  const lfoIntensityChanged = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    const wholeIntensity = parseInt((event.target as HTMLInputElement).value, 10);\r\n\r\n    setCurrentLfoIntensity(wholeIntensity)\r\n    soundManager.current.changeLfoIntensity(wholeIntensity / 100);\r\n  };\r\n\r\n  const lfoFrequencyChanged = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    const wholeFrequency = parseInt((event.target as HTMLInputElement).value, 10);\r\n\r\n    setCurrentLfoFrequency(wholeFrequency)\r\n    soundManager.current.changeLfoFrequency(wholeFrequency);\r\n  };\r\n\r\n  const chordButtonClicked = (event: React.MouseEvent<HTMLButtonElement>): boolean => {\r\n    const newStatus = !isChordProgressionEnabled;\r\n\r\n    setChordProgressionEnabled(newStatus);\r\n    soundManager.current.changeChordProgression(newStatus);\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    return false;\r\n  };\r\n\r\n  const chordDurationChanged = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    const chordDuration = parseFloat((event.target as HTMLInputElement).value);\r\n\r\n    setChordDuration(chordDuration)\r\n    soundManager.current.changeChordDuration(chordDuration);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      id=\"audioPanel\"\r\n      onMouseDown={panInterceptor}\r\n      onTouchStart={panInterceptor}\r\n    >     \r\n      {/* We want the audio toggle to always be visible, but play/pause can be hidden. */}\r\n      <div\r\n        className=\"settingBlock\"\r\n      >\r\n        {isInterfaceExpanded &&\r\n          <button\r\n            type=\"button\"\r\n            onClick={playButtonClicked}\r\n          >\r\n            <svg\r\n              className=\"feather\">\r\n              <use href={process.env.PUBLIC_URL + '/assets/feather/feather-sprite.svg#' + ((isPlaying) ? 'pause' : 'play')} />\r\n            </svg>\r\n            {isPlaying ? \"Pause\" : \"Play\"}\r\n          </button>\r\n        }\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={panelButtonClicked}\r\n        >\r\n          <svg\r\n            className=\"feather\">\r\n            <use href={process.env.PUBLIC_URL + '/assets/feather/feather-sprite.svg#' + ((isInterfaceExpanded) ? 'minimize-2' : 'maximize-2')} />\r\n          </svg>\r\n          {isInterfaceExpanded ? \"Hide Audio\" : \"Show Audio\"}\r\n        </button>\r\n      </div>\r\n      {/* Start collapsible settings block */}\r\n      {isInterfaceExpanded &&\r\n      <div>\r\n        <div\r\n          className=\"settingBlock\"\r\n        >\r\n          <label htmlFor=\"audioVolume\">\r\n            Volume\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"audioVolume\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            step=\"1\"\r\n            value={currentVolume}\r\n            onInput={volumeSliderChanged}\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"settingBlock\"\r\n        >\r\n          <label htmlFor=\"audioReverb\">\r\n            Reverb\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"audioReverb\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            step=\"1\"\r\n            value={currentReverbIntensity}\r\n            onInput={reverbIntensityChanged}\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"settingBlock\"\r\n        >\r\n          <label htmlFor=\"audioLfoIntensity\">\r\n            Wobble Intensity\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"audioLfoIntensity\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            step=\"1\"\r\n            value={currentLfoIntensity}\r\n            onInput={lfoIntensityChanged}\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"settingBlock\"\r\n        >\r\n          <label htmlFor=\"audioLfoFrequency\">\r\n            Wobble Frequency\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"audioLfoFrequency\"\r\n            min=\"1\"\r\n            max=\"30\"\r\n            step=\"1\"\r\n            value={currentLfoFrequency}\r\n            onInput={lfoFrequencyChanged}\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"settingBlock\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            onClick={chordButtonClicked}\r\n          >\r\n            <svg\r\n              className=\"feather\">\r\n              <use href={process.env.PUBLIC_URL + '/assets/feather/feather-sprite.svg#' + ((isChordProgressionEnabled) ? 'activity' : 'music')} />\r\n            </svg>\r\n            {isChordProgressionEnabled ? \"Play Tones\" : \"Play Chords\"}\r\n          </button>\r\n        </div>\r\n        <div\r\n          className=\"settingBlock\"\r\n        >\r\n          <label htmlFor=\"audioChordDuration\">\r\n            Chord Duration\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"audioChordDuration\"\r\n            min=\"0.25\"\r\n            max=\"10\"\r\n            step=\"0.25\"\r\n            value={currentChordDuration}\r\n            onInput={chordDurationChanged}\r\n          />\r\n        </div>\r\n      </div>}\r\n      {/* End of collapsible settings block */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SoundInterface;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { useAppDispatch } from \"../hooks\";\r\n\r\nimport './ColorCycler.css';\r\n\r\nfunction ColorCycler(): JSX.Element {\r\n  const dispatch = useAppDispatch();\r\n  const [isCycling, setIsCycling] = useState(false);\r\n  const CYCLE_FREQUENCY_MS = 200;\r\n\r\n  // Periodically cycle through color changes\r\n  useEffect(() => {\r\n    if (!isCycling) {\r\n      return;\r\n    }\r\n\r\n    // Create a cycler to call on an interval\r\n    const cycler = () => {\r\n      // Move hue by a fixed amount but cycle saturation up/down\r\n      const timeSegment = (Date.now() / 30000) * 2 * Math.PI;\r\n      // const hueMovement = Math.round(Math.sin(timeSegment) * 6);\r\n      const hueMovement = 2;\r\n      const saturationMovement = Math.round(Math.cos(timeSegment) * 2);\r\n\r\n      dispatch({ type: 'color/adjustHue', payload: hueMovement });\r\n      dispatch({ type: 'color/adjustSaturation', payload: saturationMovement });\r\n    }\r\n\r\n    const dispatchInterval = window.setInterval(cycler, CYCLE_FREQUENCY_MS);\r\n\r\n    return () => {\r\n      window.clearInterval(dispatchInterval);\r\n    }\r\n  }, [dispatch, isCycling]);\r\n\r\n  // Prevent mousedown/touchstart events in this area from starting panning\r\n  const panInterceptor = (event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>): void => {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  const cycleButtonClicked = (event: React.MouseEvent<HTMLButtonElement>): boolean => {\r\n    setIsCycling(!isCycling);\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      id=\"cyclerPanel\"\r\n      onMouseDown={panInterceptor}\r\n      onTouchStart={panInterceptor}\r\n    >\r\n      <button\r\n        type=\"button\"\r\n        onClick={cycleButtonClicked}\r\n      >\r\n        <svg\r\n          className=\"feather\">\r\n          <use href={process.env.PUBLIC_URL + '/assets/feather/feather-sprite.svg#' + ((isCycling) ? 'stop-circle' : 'play-circle')} />\r\n        </svg>\r\n        {isCycling ? \"Stop Cycling\" : \"Start Cycling\"}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ColorCycler;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nimport { useAppSelector } from '../hooks';\r\n\r\nfunction ColorChangeHandler(): null {\r\n  const mainHue = useAppSelector((state) => state.color.hue);\r\n  const mainSaturation = useAppSelector((state) => state.color.saturation);\r\n  const mainLightness = useAppSelector((state) => state.color.lightness);\r\n  const previousIconHue = useRef<number>(0);\r\n  const previousIconSaturation = useRef<number>(0);\r\n  const previousIconLightness = useRef<number>(0);\r\n\r\n  // Update theme-color and the favicon as colors change\r\n  useEffect(() => {\r\n    // Convert the color into the equivalent HSL CSS declaration\r\n    const colorString = `hsl(${mainHue}, ${mainSaturation}%, ${mainLightness}%)`;\r\n\r\n    // Update the theme-color meta tag to match our main color\r\n    document.querySelector('meta[name=\"theme-color\"]')?.setAttribute('content', colorString);\r\n\r\n    // See if we had enough changes in our colors to warrant an icon change.\r\n    // Firefox has a brief flash when changing that can be distracting\r\n    if (Math.abs(previousIconHue.current - mainHue) + Math.abs(previousIconSaturation.current - mainSaturation) + Math.abs(previousIconLightness.current - mainLightness) > 20) {\r\n      // Create a dummy canvas\r\n      const canvasElem = document.createElement('canvas') as HTMLCanvasElement;\r\n      canvasElem.setAttribute('width', '64px');\r\n      canvasElem.setAttribute('height', '64px');\r\n\r\n      // Try to get a 2D rendering context\r\n      const ctx = canvasElem.getContext('2d', { alpha: true, desynchronized: true });\r\n      \r\n      if (ctx) {\r\n        // Draw a hexagon with the color\r\n        const region = new Path2D();\r\n        region.moveTo(16, 8);\r\n        region.lineTo(48, 8);\r\n        region.lineTo(60, 32);\r\n        region.lineTo(48, 56);\r\n        region.lineTo(16, 56);\r\n        region.lineTo(4, 32);\r\n        region.closePath();\r\n\r\n        ctx.fillStyle = colorString;\r\n        ctx.fill(region);\r\n\r\n        // Convert to a data URL and use it to generate the favicon\r\n        const iconUrl = canvasElem.toDataURL('image/png');\r\n        document.querySelector('link[rel=\"icon\"]')?.setAttribute('href', iconUrl);\r\n      }\r\n\r\n      canvasElem.remove();\r\n    \r\n      // Update \"previous\" icon values now that we've rendered\r\n      previousIconHue.current = mainHue;\r\n      previousIconSaturation.current = mainSaturation;\r\n      previousIconLightness.current = mainLightness;\r\n    }\r\n  }, [mainHue, mainSaturation, mainLightness]);\r\n\r\n  return null;\r\n}\r\n\r\nexport default ColorChangeHandler;\r\n","import { useAppSelector } from \"../hooks\";\r\n\r\nfunction DragGuideIcon(): JSX.Element {\r\n  const baseHue = useAppSelector((state) => state.color.hue);\r\n  const baseSaturation = useAppSelector((state) => state.color.saturation);\r\n  const baseLightness = useAppSelector((state) => state.color.lightness);\r\n  const hueStepScaling = useAppSelector((state) => state.hexGrid.colorScaling.hue);\r\n\r\n  return (\r\n    <svg\r\n      viewBox=\"0 0 512 512\"\r\n    >\r\n      <path\r\n        d=\"M239.2,112L208,112L256,64L304,112L272.8,112L272.8,400L304,400L256,448L208,400L239.2,400L239.2,112Z\"\r\n        fill=\"url(#_Saturation)\"\r\n        stroke=\"black\"\r\n      />\r\n      <path\r\n        d=\"M140.554,342.052L156.154,369.072L90.585,351.503L108.154,285.933L123.754,312.953L373.169,168.953L357.569,141.933L423.138,159.503L405.569,225.072L389.969,198.052L140.554,342.052Z\"\r\n        fill=\"url(#_Lightness)\"\r\n        stroke=\"black\"\r\n      />\r\n      <path\r\n        d=\"M126.108,200.406L110.508,227.426L92.939,161.856L158.508,144.287L142.908,171.307L392.323,315.307L407.923,288.287L425.492,353.856L359.923,371.426L375.523,344.406L126.108,200.406Z\"\r\n        fill=\"url(#_Hue)\"\r\n        stroke=\"black\"\r\n      />\r\n      <defs>\r\n        <linearGradient\r\n          id=\"_Lightness\"\r\n          x1=\"0\"\r\n          y1=\"0\"\r\n          x2=\"1\"\r\n          y2=\"0\"\r\n          gradientTransform=\"rotate(-30 0.5 0.5)\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            style={{\"stopColor\": `hsl(${baseHue},70%,0%)`}}\r\n          />\r\n          <stop\r\n            offset=\"0.5\"\r\n            style={{\"stopColor\": `hsl(${baseHue},70%,${baseLightness}%)`}}\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            style={{\"stopColor\": `hsl(${baseHue},70%,100%)`}}\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"_Hue\"\r\n          x1=\"1\" \r\n          y1=\"0\" \r\n          x2=\"0\" \r\n          y2=\"0\" \r\n          gradientTransform=\"rotate(30 0.5 0.5)\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            style={{\"stopColor\": `hsl(${baseHue - (hueStepScaling * 15)},70%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"0.25\"\r\n            style={{\"stopColor\": `hsl(${baseHue - (hueStepScaling * 8)},70%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"0.5\"\r\n            style={{\"stopColor\": `hsl(${baseHue},70%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"0.75\"\r\n            style={{\"stopColor\": `hsl(${baseHue + (hueStepScaling * 8)},70%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            style={{\"stopColor\": `hsl(${baseHue + (hueStepScaling * 15)},70%,50%)`}}\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"_Saturation\"\r\n          x1=\"0\"\r\n          y1=\"0\"\r\n          x2=\"1\"\r\n          y2=\"0\"\r\n          gradientTransform=\"rotate(-90 0.5 0.5)\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            style={{\"stopColor\": `hsl(${baseHue},0%,${baseLightness}%)`}}\r\n          />\r\n          <stop\r\n            offset=\"0.5\"\r\n            style={{\"stopColor\": `hsl(${baseHue},${baseSaturation}%,${baseLightness}%)`}}\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            style={{\"stopColor\": `hsl(${baseHue},100%,${baseLightness}%)`}}\r\n          />\r\n        </linearGradient>\r\n      </defs>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default DragGuideIcon;\r\n","import { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\n\r\nimport './App.css';\r\nimport Grid from './Grid';\r\nimport SoundInterface from \"./SoundInterface\";\r\nimport ColorCycler from \"./ColorCycler\";\r\nimport ColorChangeHandler from './ColorChangeHandler';\r\nimport DragGuideIcon from \"./DragGuideIcon\";\r\nimport DebugDialog from \"./DebugDialog\";\r\n\r\nfunction App(): JSX.Element {\r\n  const dispatch = useAppDispatch();\r\n  const mainLightness = useAppSelector((state) => state.color.lightness);\r\n  const baseHexSize = useAppSelector((state) => state.hexGrid.baseHexSize);\r\n  const colorScaling = useAppSelector((state)  => state.hexGrid.colorScaling);\r\n  const [isPanning, setIsPanning] = useState(false);\r\n  const lastPannedClientX = useRef(0);\r\n  const lastPannedClientY = useRef(0);\r\n\r\n  // Ensure that we resize the grid when the window resizes\r\n  useEffect(() => {\r\n    const handleResize = (): void => {\r\n      setIsPanning(false);\r\n      dispatch({ type: 'hexGrid/resize' });\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize)\r\n    };\r\n  }, [dispatch]);\r\n  \r\n  // Listen to keyboard events to scale color values\r\n  useEffect(() => {\r\n    const handleKey = (event: KeyboardEvent): void => {\r\n      // Numpad left/right and arrow left/right control hue\r\n      // Numpad up/down and arrow up/down control saturation    \r\n      // Plus and minus control luminance\r\n      const scaleFactor = 1;\r\n  \r\n      switch(event.code) {\r\n        case 'Numpad8':\r\n        case 'ArrowUp':\r\n          dispatch({ type: 'color/adjustSaturation', payload: scaleFactor });\r\n          break;\r\n  \r\n        case 'Numpad2':\r\n        case 'ArrowDown':\r\n          dispatch({ type: 'color/adjustSaturation', payload: -scaleFactor });\r\n          break;\r\n  \r\n        case 'Numpad6':\r\n        case 'ArrowRight':\r\n          dispatch({ type: 'color/adjustHue', payload: scaleFactor });\r\n          break;\r\n  \r\n        case 'Numpad4':\r\n        case 'ArrowLeft':\r\n          dispatch({ type: 'color/adjustHue', payload: -scaleFactor });\r\n          break;\r\n  \r\n        case 'NumpadAdd':\r\n        case 'Equal':\r\n          dispatch({ type: 'color/adjustLightness', payload: scaleFactor });\r\n          break;\r\n  \r\n        case 'NumpadSubtract':\r\n        case 'Minus':\r\n          dispatch({ type: 'color/adjustLightness', payload: -scaleFactor });\r\n          break;\r\n  \r\n        default:\r\n          // no-op\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKey);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKey)\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // Listen to when we start panning and store the initial coordinates\r\n  // so we can get relative values\r\n  useEffect(() => {\r\n    const handlePanStart = (event: TouchEvent | MouseEvent): void => {\r\n      // Skip when we're already panning\r\n      // XXX: Investigate whether we can use this to prevent creating the event handler in the first place\r\n      if (isPanning) {\r\n        return;\r\n      }\r\n  \r\n      // Switch based on whether this is a touch or mouse event\r\n      let currentClientX: number;\r\n      let currentClientY: number;\r\n\r\n      if (event.type === 'touchstart') {\r\n        const touchEvent = event as TouchEvent;\r\n  \r\n        // Don't do anything with multi-touch\r\n        if (touchEvent.touches.length !== 1) {\r\n          return;\r\n        }\r\n  \r\n        currentClientX = touchEvent.touches[0].clientX;\r\n        currentClientY = touchEvent.touches[0].clientY;\r\n      }\r\n      else if (event.type === 'mousedown') {\r\n        const mouseEvent = event as MouseEvent;\r\n  \r\n        currentClientX = mouseEvent.clientX;\r\n        currentClientY = mouseEvent.clientY;\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n\r\n      setIsPanning(true);\r\n      lastPannedClientX.current = currentClientX;\r\n      lastPannedClientY.current = currentClientY;\r\n  \r\n      if (process.env.NODE_ENV !== 'production') {\r\n        console.log(`pan start: (${currentClientX}, ${currentClientY})`);\r\n      }\r\n    }\r\n\r\n    // Handle both touch/mouse events for panning\r\n    window.addEventListener('touchstart', handlePanStart);\r\n    window.addEventListener('mousedown', handlePanStart);\r\n\r\n    return () => {\r\n      window.removeEventListener('touchstart', handlePanStart);\r\n      window.removeEventListener('mousedown', handlePanStart);\r\n    }\r\n  }, [dispatch, isPanning]);\r\n\r\n  // Add an effect that will start to change colors as we drag far enough\r\n  useEffect(() => {\r\n    const handlePanMove = (event: TouchEvent | MouseEvent): void => {\r\n      // Make sure we're panning\r\n      // XXX: Investigate whether we can use this to prevent creating the event handler in the first place\r\n      if (!isPanning) {\r\n        return;\r\n      }\r\n  \r\n      let currentClientX: number;\r\n      let currentClientY: number;\r\n      let isTouchEvent: boolean;\r\n  \r\n      // Switch based on whether this is a touch or mouse event\r\n      if (event.type === 'touchmove') {\r\n        const touchEvent = event as TouchEvent;\r\n  \r\n        // Don't do anything with multi-touch\r\n        if (touchEvent.touches.length !== 1) {\r\n          return;\r\n        }\r\n  \r\n        isTouchEvent = true;\r\n        currentClientX = touchEvent.touches[0].clientX;\r\n        currentClientY = touchEvent.touches[0].clientY;\r\n      }\r\n      else if (event.type === 'mousemove') {\r\n        const mouseEvent = event as MouseEvent;\r\n        \r\n        isTouchEvent = false;\r\n        currentClientX = mouseEvent.clientX;\r\n        currentClientY = mouseEvent.clientY;\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n  \r\n      // Determine the distance between the click and our \"last panned\" value.\r\n      // If it's larger than our base hex size, we want to shift one of the color component\r\n      const distanceX = currentClientX - lastPannedClientX.current;\r\n      const distanceY = currentClientY - lastPannedClientY.current;\r\n      const distanceTotal = Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));\r\n  \r\n      if (distanceTotal >= 2 * baseHexSize) {\r\n        // When calculating atan2, invert the y-distance because HTML coordinates are in reverse\r\n        const atan = Math.atan2(-distanceY / distanceTotal, distanceX / distanceTotal);\r\n        let angle = atan * 180 / Math.PI;\r\n  \r\n        // Normalize the angle to 0-360 to simplify\r\n        if (angle < 0) {\r\n          angle += 360;\r\n        }\r\n  \r\n        if (process.env.NODE_ENV !== 'production') {\r\n          console.log(`pan threshold met (angle: ${angle})`);\r\n        }\r\n  \r\n        // Now map the different axes (assuming 6 \"chunks\")\r\n        if (angle <= 60) {\r\n          // Right and up - adjust lightness upward\r\n          dispatch({ type: 'color/adjustLightness', payload: colorScaling.lightness });\r\n        }\r\n        else if (angle <= 120) {\r\n          // Straight up - adjust saturation upward\r\n          dispatch({ type: 'color/adjustSaturation', payload: colorScaling.saturation });\r\n        }\r\n        else if (angle <= 180) {\r\n          // Left and up - adjust hue\r\n          dispatch({ type: 'color/adjustHue', payload: colorScaling.hue });\r\n        }\r\n        else if (angle <= 240) {\r\n          // Left and down - adjust lightness downward\r\n          dispatch({ type: 'color/adjustLightness', payload: -colorScaling.lightness });\r\n        }\r\n        else if (angle <= 300) {\r\n          // Straight down - adjust saturation downward\r\n          dispatch({ type: 'color/adjustSaturation', payload: -colorScaling.saturation });\r\n        }\r\n        else {\r\n          // Right and down - adjust hue\r\n          dispatch({ type: 'color/adjustHue', payload: -colorScaling.hue });\r\n        }\r\n  \r\n        // Update our \"last panned\" value\r\n        lastPannedClientX.current = currentClientX;\r\n        lastPannedClientY.current = currentClientY;\r\n\r\n        // Add some minor haptic feedback if this was a touch event\r\n        if (isTouchEvent && 'vibrate' in navigator) {\r\n          navigator.vibrate(40);\r\n        }\r\n      }\r\n\r\n      // Stop trying to scroll or do anything else\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    };\r\n    \r\n    // Handle both touch/mouse events for panning\r\n    window.addEventListener('touchmove', handlePanMove);\r\n    window.addEventListener('mousemove', handlePanMove);\r\n\r\n    return () => {\r\n      window.removeEventListener('touchmove', handlePanMove);\r\n      window.removeEventListener('mousemove', handlePanMove);\r\n    }\r\n  }, [dispatch, baseHexSize, isPanning, colorScaling]);\r\n\r\n  // Add an effect to handle when we want to stop panning\r\n  useEffect(() => {\r\n    const handlePanEnd = (): void => {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (isPanning) {\r\n          console.log('pan end');\r\n        }\r\n      }\r\n  \r\n      setIsPanning(false);\r\n    };\r\n\r\n    // Handle both touch/mouse events for panning\r\n    window.addEventListener('touchend', handlePanEnd);\r\n    window.addEventListener('touchcancel', handlePanEnd);\r\n    window.addEventListener('mouseup', handlePanEnd);\r\n\r\n    return () => {\r\n      window.removeEventListener('touchend', handlePanEnd);\r\n      window.removeEventListener('touchcancel', handlePanEnd);\r\n      window.removeEventListener('mouseup', handlePanEnd);\r\n    }\r\n  }, [isPanning]);\r\n\r\n  return (\r\n    <div\r\n      style={{'cursor': isPanning ? 'grabbing' : 'grab'}}\r\n      className={mainLightness <= 40 ? 'dark-contrast' : 'light-contrast'}\r\n    >\r\n      {/* Because this intercepts touch events, we always want to have it visible. */}\r\n      <div\r\n        className=\"dragOverlay\"\r\n      >\r\n        {isPanning && <DragGuideIcon />}\r\n      </div>\r\n      <Grid />\r\n      <SoundInterface />\r\n      <ColorCycler />\r\n      <ColorChangeHandler />\r\n      {/* Only include debugging information in dev builds */\r\n        process.env.NODE_ENV !== 'production'\r\n        &&\r\n        <DebugDialog />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}