{"version":3,"sources":["state/colorSlice.ts","state/hexGridSlice.ts","store.ts","hooks.ts","components/Cell.tsx","components/Grid.tsx","soundManager.ts","components/SoundInterface.tsx","components/ColorChangeHandler.tsx","components/DragGuideIcon.tsx","components/App.tsx","index.tsx"],"names":["colorSlice","createSlice","name","initialState","hue","saturation","lightness","reducers","adjustHue","state","action","newHue","payload","adjustSaturation","Math","min","max","adjustLightness","actions","getHexFactory","baseHexSize","extendHex","orientation","size","offset","getCornerPointsString","hexFactory","corners","map","x","y","join","getStateForScreen","document","documentElement","style","setProperty","window","innerHeight","screenWidth","innerWidth","clientWidth","screenHeight","clientHeight","minDimension","cellHeight","sqrt","cellWidth","cellColumns","floor","cellRows","centerCoord","screenDimensions","height","width","gridDimensions","cellDimensions","cellPointsString","console","debug","screen","grid","cell","hexGridSlice","resize","newState","store","configureStore","reducer","color","colorReducer","hexGrid","hexGridReducer","scaleNumericValue","fromValue","fromRange","toRange","scalingFactor","valueInRange","clamp","value","minimum","maximum","useAppSelector","useSelector","Cell","props","centerHex","hex","centerHexCoord","pointString","baseHue","baseSaturation","baseLightness","scaledHue","useMemo","scalingRange","round","q","selectScaledHue","scaledSaturation","percentage","s","selectScaledSaturation","scaledLightness","r","selectScaledLightness","scaledColorString","stroke","strokeWidth","strokeOpacity","toPoint","transform","points","fill","Grid","cellHexes","gridHexes","defineGrid","rectangle","centerIndex","indexOf","splice","push","selectGridHexes","cellElements","hexToKey","centerHexPoint","length","verticalOffset","position","left","top","overflow","userSelect","createOscillators","context","semitones","undefined","square","OscillatorNode","type","sawtooth","sine","frequency","setValueAtTime","currentTime","centsPerSemitone","pow","detune","createOscillatorGains","oscillators","GainNode","gain","connect","createOscillatorsMixer","oscillatorGains","merger","ChannelMergerNode","numberOfInputs","channelCount","createOscillatorStructure","oscillatorsMixer","output","assignWaveformTable","wavetableJson","Array","isArray","wave","PeriodicWave","real","imag","chains","chain","setPeriodicWave","setWetDryBalance","wetNode","dryNode","wetGain","atTime","SoundManager","structureInitialized","audioContext","baseFrequencyChain","thirdFrequencyChain","fifthFrequencyChain","lfoChain","reverbChain","lfoFrequency","lfoGain","reverbGain","overallVolumeGainNode","overallVolumeGain","this","AudioContext","chainsMixer","oscillator","oscillatorGain","constantSource","ConstantSourceNode","constantGain","gainMixer","lfoOutput","createLfoStructure","input","reverbConvolver","ConvolverNode","dryGain","reverbOutput","createReverbStructure","destination","fetch","process","then","response","json","tableJson","catch","reason","error","arrayBuffer","buffer","decodeAudioData","audioData","SCALE_UP","SCALE_DOWN","PURE_GREEN","PURE_BLUE","PURE_RED_WRAP","redSquareComponent","blueSineComponent","greenSawComponent","assignWaveformGains","chordGains","semitoneDistance","assignWaveformFrequency","initializeAudioStructure","cascadeHueToAudioNodes","cascadeLightnessToAudioNodes","cascadeSaturationToAudioNodes","start","startOscillators","resume","suspend","volume","intensity","SoundInterface","mainHue","mainSaturation","mainLightness","soundManager","useRef","useState","isInterfaceExpanded","setInterfaceExpanded","isPlaying","setIsPlaying","currentVolume","setCurrentVolume","currentReverbIntensity","setCurrentReverbIntensity","currentLfoIntensity","setCurrentLfoIntensity","currentLfoFrequency","setCurrentLfoFrequency","useEffect","current","changeHue","changeSaturation","changeLightness","panInterceptor","event","stopPropagation","id","className","onMouseDown","onTouchStart","onClick","pause","play","preventDefault","href","htmlFor","step","onInput","wholeVolume","parseInt","target","changeVolume","wholeIntensity","changeReverbIntensity","changeLfoIntensity","wholeFrequency","changeLfoFrequency","ColorChangeHandler","colorString","querySelector","setAttribute","canvasElem","createElement","ctx","getContext","alpha","desynchronized","region","Path2D","moveTo","lineTo","closePath","fillStyle","iconUrl","toDataURL","remove","DragGuideIcon","viewBox","d","x1","y1","x2","y2","gradientTransform","App","dispatch","useDispatch","isPanning","setIsPanning","lastPannedClientX","lastPannedClientY","handleResize","addEventListener","removeEventListener","handleKey","code","handlePanStart","currentClientX","currentClientY","touchEvent","touches","clientX","clientY","mouseEvent","log","handlePanMove","isTouchEvent","scaleFactor","distanceX","distanceY","distanceTotal","angle","atan2","PI","navigator","vibrate","handlePanEnd","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.78f196fd.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\ninterface ColorState {\r\n  hue: number,\r\n  saturation: number,\r\n  lightness: number\r\n}\r\n\r\nconst initialState: ColorState = {\r\n  hue: 300,\r\n  saturation: 50,\r\n  lightness: 40\r\n};\r\n\r\nexport const colorSlice = createSlice({\r\n  name: 'color',\r\n  initialState,\r\n  reducers: {\r\n    adjustHue: (state, action: PayloadAction<number>) => {\r\n      let newHue = (state.hue + (action.payload % 360));\r\n\r\n      if (newHue < 0) {\r\n        newHue += 360;\r\n      }\r\n      else if (newHue > 360) {\r\n        newHue -= 360;\r\n      }\r\n\r\n      state.hue = newHue;\r\n    },\r\n    adjustSaturation: (state, action: PayloadAction<number>) => {\r\n      state.saturation = Math.min(100, Math.max(0, state.saturation + action.payload));\r\n    },\r\n    adjustLightness: (state, action: PayloadAction<number>) => {\r\n      state.lightness = Math.min(100, Math.max(0, state.lightness + action.payload));\r\n    }\r\n  }\r\n});\r\n\r\nexport const { adjustHue, adjustSaturation, adjustLightness } = colorSlice.actions;\r\nexport default colorSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { defineGrid, extendHex, HexFactory, PointLike } from \"honeycomb-grid\";\r\n\r\n/**\r\n * THe arguments used to customize the hex factory and propagated throughout the stack.\r\n */\r\nexport interface HexArgs {\r\n  orientation: 'flat',\r\n  size: number,\r\n  offset: number\r\n}\r\n\r\nexport interface Size {\r\n  width: number,\r\n  height: number\r\n}\r\n\r\nexport interface HexGridState {\r\n  screenDimensions: Size,\r\n  gridDimensions: Size,\r\n  cellDimensions: Size,\r\n  cellPointsString: string, // XXX: Good memoization candidate\r\n  baseHexSize: number,\r\n  centerCoord: PointLike // XXX: Good memoization candidate\r\n}\r\n\r\n/**\r\n * Gets a hex factory for the specified hex size.\r\n * @param baseHexSize The base hex size.\r\n * @returns The corresponding hex factory.\r\n */\r\nfunction getHexFactory(baseHexSize: number): HexFactory<HexArgs> {\r\n  return extendHex({\r\n    orientation: 'flat',\r\n    size: baseHexSize,\r\n    offset: -1\r\n  });\r\n}\r\n\r\n/**\r\n * Gets a string of points suitable for use in defining each SVG hexagon.\r\n */\r\nfunction getCornerPointsString(hexFactory: HexFactory<HexArgs>): string {\r\n  return hexFactory()\r\n    .corners()\r\n    .map(({x, y}) => `${x}, ${y}`)\r\n    .join(' ');\r\n}\r\n\r\n/**\r\n * Gets the state to use for the current grid screen.\r\n */\r\nfunction getStateForScreen(): HexGridState {\r\n  // HACK: Define viewport height while we're at it\r\n  // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\r\n  document.documentElement.style.setProperty('--vh', `${window.innerHeight * 0.01}px`);\r\n  \r\n  // Determine the available width/height and use that to determine the constraining direction\r\n  const screenWidth = window.innerWidth || document.documentElement.clientWidth;\r\n  const screenHeight = window.innerHeight || document.documentElement.clientHeight;\r\n  const minDimension = Math.min(screenWidth, screenHeight);\r\n\r\n  // Map the smallest dimension to a hex size\r\n  let baseHexSize = 72;\r\n\r\n  if (minDimension <= 640) {\r\n    baseHexSize = 36;\r\n  }\r\n  else if (minDimension <= 768) {\r\n    baseHexSize = 48;\r\n  }\r\n  else if (minDimension <= 1024) {\r\n    baseHexSize = 60;\r\n  }\r\n\r\n  // Construct a hex factory just so we can get the corner string\r\n  const hexFactory = getHexFactory(baseHexSize);\r\n  \r\n  // Calculate the correct number of columns and rows using flat-topped coordinates:\r\n  // https://www.redblobgames.com/grids/hexagons/#basics\r\n  // Cell columns: the screen width / 0.75 cell width, plus two for offsets/the right edge\r\n  // Cell rows: the screen height / cell height, plus three for offsets/the bottom edge (Mobile landscape is the cause for the third)\r\n  const cellHeight = baseHexSize * Math.sqrt(3);\r\n  const cellWidth = baseHexSize * 2;\r\n  const cellColumns = Math.floor(screenWidth / (cellWidth * 0.75)) + 2;\r\n  const cellRows = Math.floor(screenHeight / cellHeight) + 3;\r\n\r\n  // Calculate the center coordinate\r\n  const centerCoord: PointLike = {\r\n    x: Math.floor(cellColumns / 2.0),\r\n    y: Math.floor(cellRows / 2.0)\r\n  };\r\n\r\n  // Generate the state and log\r\n  const state: HexGridState = {\r\n    screenDimensions: {\r\n      height: screenHeight,\r\n      width: screenWidth\r\n    },\r\n    gridDimensions: {\r\n      height: cellRows,\r\n      width: cellColumns\r\n    },\r\n    cellDimensions: {\r\n      height: cellHeight,\r\n      width: cellWidth\r\n    },\r\n    cellPointsString: getCornerPointsString(hexFactory),\r\n    baseHexSize,\r\n    centerCoord\r\n  }\r\n\r\n  console.debug(`Calculated dimensions`, { screen: state.screenDimensions, grid: state.gridDimensions, cell: state.cellDimensions });\r\n  return state;\r\n}\r\n\r\nexport const hexGridSlice = createSlice({\r\n  name: 'hexGrid',\r\n  initialState: getStateForScreen(),\r\n  reducers: {\r\n    resize: (state) => {\r\n      const newState = getStateForScreen();\r\n\r\n      state.screenDimensions = newState.screenDimensions;\r\n      state.gridDimensions = newState.gridDimensions;\r\n      state.cellDimensions = newState.cellDimensions;\r\n      state.cellPointsString = newState.cellPointsString;\r\n      state.centerCoord = newState.centerCoord;\r\n      state.baseHexSize = newState.baseHexSize;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { resize } = hexGridSlice.actions;\r\nexport default hexGridSlice.reducer;\r\n\r\n/**\r\n * Generates a hex grid using the specified dimensions, center hex coordinate, and size of each hex.\r\n * @param gridDimensions The grid dimensions to use.\r\n * @param centerCoord The coordinate of the center hex element.\r\n * @param baseHexSize The base size, in pixels, of each hexagon.\r\n * @returns A hex grid. The \"center\" hex element will be the last item in the collection.\r\n */\r\nexport const selectGridHexes = (gridDimensions: Size, centerCoord: PointLike, baseHexSize: number) => {\r\n  // Construct the hex/grid factories\r\n  const hexFactory = getHexFactory(baseHexSize);\r\n\r\n  const gridFactory = defineGrid(hexFactory);\r\n\r\n  // Generate the equivalent hexes\r\n  const gridHexes = gridFactory.rectangle({\r\n    width: gridDimensions.width,\r\n    height: gridDimensions.height\r\n  });\r\n\r\n  // Extract the center item from the list and put it at the end so it gets SVG rendering priority\r\n  const centerIndex = gridHexes.indexOf(centerCoord);\r\n\r\n  if (centerIndex !== -1) {\r\n    const centerHex = gridHexes.splice(centerIndex, 1)[0];\r\n    gridHexes.push(centerHex);\r\n  }\r\n\r\n  return gridHexes;\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport { Hex, PointLike } from 'honeycomb-grid';\r\n\r\nimport colorReducer from './state/colorSlice';\r\nimport hexGridReducer, { Size } from './state/hexGridSlice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    color: colorReducer,\r\n    hexGrid: hexGridReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\n/**\r\n * Scales a numeric value from one range to another.\r\n * @param fromValue The source value to scale.\r\n * @param fromRange The minimum/maximum expected range of the source value.\r\n * @param toRange The minimum/maximum range of the destination value.\r\n * @returns The resulting scaled value.\r\n */\r\nexport function scaleNumericValue(fromValue: number, fromRange: [number, number], toRange: [number, number]): number {\r\n  const scalingFactor = (toRange[1] - toRange[0]) / (fromRange[1] - fromRange[0]);\r\n  const valueInRange = Math.min(fromRange[1], Math.max(fromRange[0], fromValue)) - fromRange[0];\r\n\r\n  return toRange[0] + (valueInRange * scalingFactor);\r\n}\r\n\r\n/**\r\n * Clamps a numeric value into a specific range.\r\n * @param value The value to clamp.\r\n * @param minimum The minimum value in the range.\r\n * @param maximum The maximum value in the range.\r\n * @returns The clamped value.\r\n */\r\nexport function clamp(value: number, minimum: number, maximum: number) {\r\n  return Math.max(minimum, Math.min(maximum, value));\r\n}\r\n\r\n/**\r\n * Determines whether the specified hex refers to the hex at the center.\r\n * @param centerHex The center hex.\r\n * @param hex The hex to check.\r\n * @returns True if the two refer to the same coordinates; otherwise, false.\r\n */\r\nexport const selectIsCenter = (centerHex: PointLike, hex: Hex<any>): boolean => {\r\n  return hex.x === centerHex.x\r\n    && hex.y === centerHex.y;\r\n};\r\n\r\n/**\r\n * Determines a scaled hue value based on the provided hex position relative to the entire grid.\r\n * @param baseHue The base hue value to scale.\r\n * @param gridDimensions The maximum extent of the grid.\r\n * @param hex The hex coordinates to use for scaling the color.\r\n * @returns A scaled hue value.\r\n */\r\nexport const selectScaledHue = (baseHue: number, gridDimensions: Size, hex: Hex<any>): number => {\r\n  // Determine the range that we scale depending on how wide the grid is\r\n  let scalingRange = 72;\r\n\r\n  if (gridDimensions.width <= 8) {\r\n    scalingRange = 48;\r\n  }\r\n\r\n  // Q = 0 to the maximum number of columns\r\n  return Math.round(scaleNumericValue(\r\n    hex.q,\r\n    [0, gridDimensions.width],\r\n    [baseHue - scalingRange, baseHue + scalingRange]));\r\n};\r\n\r\n/**\r\n * Determines a scaled saturation value based on the provided hex position relative to the entire grid.\r\n * @param baseSaturation The base saturation value to scale.\r\n * @param gridDimensions The maximum extent of the grid.\r\n * @param hex The hex coordinates to use for scaling the color.\r\n * @returns A scaled saturation value.\r\n */\r\nexport const selectScaledSaturation = (baseSaturation: number, gridDimensions: Size, hex: Hex<any>): number => {\r\n  // Determine the range that we scale depending on how tall the grid is, since this is a purely vertical scale\r\n  let scalingRange = 15;\r\n\r\n  if (gridDimensions.height <= 8) {\r\n    scalingRange = 10;\r\n  }\r\n\r\n  // S = negative number of rows to positive number of rows\r\n  const percentage = scaleNumericValue(\r\n    hex.s,\r\n    [-gridDimensions.height, gridDimensions.height],\r\n    [baseSaturation - scalingRange, baseSaturation + scalingRange]);\r\n\r\n  return Math.round(clamp(percentage, 0, 100));\r\n};\r\n\r\n/**\r\n * Determines a scaled lightness value based on the provided hex position relative to the entire grid.\r\n * @param baseLightness The base lightness value to scale.\r\n * @param gridDimensions The maximum extent of the grid.\r\n * @param hex The hex coordinates to use for scaling the color.\r\n * @returns A scaled lightness value.\r\n */\r\nexport const selectScaledLightness = (baseLightness: number, gridDimensions: Size, hex: Hex<any>): number => {\r\n  // Determine the range that we scale depending on how tall/wide the grid is, since this is a diagonal direction\r\n  let scalingRange = 15;\r\n\r\n  if (gridDimensions.width <= 8 || gridDimensions.height <= 8) {\r\n    scalingRange = 10;\r\n  }\r\n\r\n  // R = negative number of rows to positive number of rows\r\n  // Scale the range in reverse so that lightness goes in the direction that appears up\r\n  const percentage = scaleNumericValue(\r\n    hex.r,\r\n    [-gridDimensions.height, gridDimensions.height],\r\n    [baseLightness + scalingRange, baseLightness - scalingRange]);\r\n\r\n  return Math.round(clamp(percentage, 0, 100));\r\n};\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import { useMemo } from 'react';\r\nimport { Hex } from 'honeycomb-grid';\r\n\r\nimport { selectScaledHue, selectScaledSaturation, selectScaledLightness, selectIsCenter } from '../store';\r\nimport { useAppSelector } from '../hooks';\r\n\r\nfunction Cell(props: { hex: Hex<any> }): JSX.Element {\r\n  const gridDimensions = useAppSelector((state) => state.hexGrid.gridDimensions);\r\n  // const cellDimensions = useAppSelector((state) => state.hexGrid.cellDimensions); // Only used for debugging\r\n  const centerHexCoord = useAppSelector((state) => state.hexGrid.centerCoord);\r\n  const pointString = useAppSelector((state) => state.hexGrid.cellPointsString);\r\n  const baseHue = useAppSelector((state) => state.color.hue);\r\n  const baseSaturation = useAppSelector((state) => state.color.saturation);\r\n  const baseLightness = useAppSelector((state) => state.color.lightness); \r\n\r\n  const scaledHue = useMemo(() => {\r\n    return selectScaledHue(baseHue, gridDimensions, props.hex)\r\n  }, [baseHue, gridDimensions, props.hex]);\r\n\r\n  const scaledSaturation = useMemo(() => {\r\n    return selectScaledSaturation(baseSaturation, gridDimensions, props.hex)\r\n  }, [baseSaturation, gridDimensions, props.hex]);\r\n\r\n  const scaledLightness = useMemo(() => {\r\n    return selectScaledLightness(baseLightness, gridDimensions, props.hex)\r\n  }, [baseLightness, gridDimensions, props.hex]);\r\n\r\n  const scaledColorString = useMemo(() => {\r\n    return `hsl(${scaledHue}, ${scaledSaturation}%, ${scaledLightness}%)`;\r\n  }, [scaledHue, scaledSaturation, scaledLightness]);\r\n\r\n  let stroke = scaledColorString;\r\n\r\n  // Change the stroke based on whether this is the \"central\" hex\r\n  let strokeWidth = 1;\r\n  let strokeOpacity = 0.15;\r\n\r\n  if (selectIsCenter(centerHexCoord, props.hex)) {\r\n    strokeWidth = 2;\r\n    strokeOpacity = 0.5;\r\n    stroke = 'black';\r\n  }\r\n\r\n  // Use x/y coords to translate the polygon\r\n  const {x, y} = props.hex.toPoint();\r\n  const transform = `translate(${x}, ${y})`;\r\n\r\n  return (\r\n    <g\r\n      transform={transform}\r\n    >\r\n      <polygon\r\n        points={pointString}\r\n        fill={scaledColorString}\r\n        stroke={stroke}\r\n        strokeOpacity={strokeOpacity}\r\n        strokeWidth={strokeWidth}\r\n      />\r\n      {/* Only include debugging information in dev builds */}\r\n      {/* {process.env.NODE_ENV !== 'production'\r\n        &&\r\n        <text\r\n          fill=\"#fff\"\r\n          x={cellDimensions.width / 2}\r\n          y={cellDimensions.height / 2}\r\n          textAnchor=\"middle\"\r\n          dominantBaseline=\"middle\"\r\n          textLength={cellDimensions.width * 0.66}\r\n        >\r\n          {props.hex.q}, {props.hex.r}, {props.hex.s}\r\n        </text>} */}\r\n    </g> \r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","import { useMemo } from \"react\";\r\nimport { Hex } from \"honeycomb-grid\";\r\n\r\nimport { useAppSelector } from \"../hooks\";\r\nimport { selectGridHexes } from \"../state/hexGridSlice\";\r\n\r\nimport Cell from './Cell';\r\n\r\n/**\r\n * Generates a key for the provided hex element.\r\n * @param hex The hex element.\r\n * @returns The key for the hex.\r\n */\r\n function hexToKey(hex: Hex<any>): string {\r\n  // Use the QRS cubic coordinates to map this\r\n  return `${hex.q}~${hex.r}~${hex.s}`;\r\n}\r\n\r\nfunction Grid(): JSX.Element {\r\n  const screenDimensions = useAppSelector((state) => state.hexGrid.screenDimensions);\r\n  const gridDimensions = useAppSelector((state) => state.hexGrid.gridDimensions);\r\n  const cellDimensions = useAppSelector((state) => state.hexGrid.cellDimensions);\r\n  const centerCoord = useAppSelector((state) => state.hexGrid.centerCoord);\r\n  const baseHexSize = useAppSelector((state) => state.hexGrid.baseHexSize);\r\n\r\n  // Map each cell to a discrete component.\r\n  const cellHexes = useMemo(\r\n    () => {\r\n      return selectGridHexes(gridDimensions, centerCoord, baseHexSize);\r\n    },\r\n    [gridDimensions, centerCoord, baseHexSize]);\r\n\r\n  const cellElements = useMemo(\r\n    () => {\r\n      return cellHexes.map((hex) => {\r\n          return <Cell\r\n            key={hexToKey(hex)}\r\n            hex={hex}\r\n          />\r\n        });\r\n    },\r\n    [cellHexes]);\r\n\r\n  // The center hex element will be last in the collection.\r\n  // Shift the SVG up and to the left until the center of that hex matches the center of the screen.\r\n  const centerHexPoint = cellHexes[cellHexes.length - 1].toPoint();\r\n  let verticalOffset = (screenDimensions.height / 2) - centerHexPoint.y - (cellDimensions.height / 2);\r\n  let horizontalOffset = (screenDimensions.width / 2) - centerHexPoint.x - (cellDimensions.width / 2);\r\n\r\n  const style: React.CSSProperties = {\r\n    position: 'relative' as const,\r\n    left: horizontalOffset,\r\n    top: verticalOffset,\r\n    overflow: 'visible',\r\n    userSelect: 'none'\r\n  };\r\n\r\n  return (\r\n    <svg\r\n      style={style}\r\n    >\r\n      {cellElements}\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import { scaleNumericValue, clamp } from './store';\r\n\r\n/**\r\n * Describes a collection of waveform-specific nodes, all of a particular type.\r\n */\r\ninterface WaveformNodes<NodeType extends AudioNode> {\r\n  square: NodeType;\r\n  \r\n  sawtooth: NodeType;\r\n  \r\n  sine: NodeType;\r\n}\r\n\r\n/**\r\n * Describes the chain of audio nodes for implementing output at a specific frequency.\r\n */\r\ninterface FrequencyOscillatorChain {\r\n  /**\r\n   * The waveform-specific oscillator nodes.\r\n   * The frequencies are adjusted based on the lightness.\r\n   */\r\n  oscillators: WaveformNodes<OscillatorNode>;\r\n\r\n  /**\r\n   * The waveform-specific gain nodes.\r\n   * The gains are adjusted based on the hue.\r\n   */\r\n  oscillatorGains: WaveformNodes<GainNode>;\r\n\r\n  /**\r\n   * The final output node.\r\n   * For chord frequencies, the gain is adjusted based on the saturation.\r\n   */\r\n  output: GainNode;\r\n}\r\n\r\n/**\r\n * Describes the chain of audio nodes for implementing a variable LFO.\r\n */\r\ninterface LfoChain {\r\n  /**\r\n   * The waveform oscillator.\r\n   */\r\n  oscillator: OscillatorNode;\r\n\r\n  /**\r\n   * The gain node used to weight how much the LFO is \"on\".\r\n   * Together with the constantGain, should have a total gain of 1.0.\r\n   */\r\n  oscillatorGain: GainNode;\r\n\r\n  /**\r\n   * The gain node used to weight how much the LFO is \"off\".\r\n   * Together with the oscillatorGain, should have a total gain of 1.0.\r\n   */\r\n  constantGain: GainNode;\r\n\r\n  /**\r\n   * The final output node whose gain is varied based on the LFO.\r\n   */\r\n  lfoOutput: GainNode;\r\n}\r\n\r\n/**\r\n * Describes the chain of audio nodes for implementing a variable reverb.\r\n */\r\ninterface ReverbChain {\r\n  /**\r\n   * The convolver node for applying reverb.\r\n   */\r\n  reverbConvolver: ConvolverNode;\r\n\r\n  /**\r\n   * The gain node used to weight how much the reverb is \"on\".\r\n   * Together with the dryGain, should have a total gain of 1.0.\r\n   */\r\n  wetGain: GainNode;\r\n\r\n  /**\r\n   * The gain node used to weight how much the reverb is \"off\".\r\n   * Together with the wetGain, should have a total gain of 1.0.\r\n   */\r\n  dryGain: GainNode;\r\n\r\n  /**\r\n   * The final output node combining both \"wet\" and \"dry\" signals.\r\n   */\r\n  reverbOutput: ChannelMergerNode;\r\n}\r\n\r\n/**\r\n * Creates a batch of waveform-specific oscillator nodes.\r\n * @param context The audio context to use.\r\n * @param semitones The number of semitones to detune the oscillators by. Optional.\r\n * @returns The resulting waveform-specific oscillator nodes.\r\n */\r\nfunction createOscillators(context: AudioContext, semitones: number | undefined = undefined): WaveformNodes<OscillatorNode> {\r\n  const square = new OscillatorNode(context, { type: 'square' });\r\n  const sawtooth = new OscillatorNode(context, { type: 'sawtooth' });\r\n  const sine = new OscillatorNode(context, { type: 'sine' });\r\n\r\n  square.frequency.setValueAtTime(440, context.currentTime);\r\n  sawtooth.frequency.setValueAtTime(440, context.currentTime);\r\n  sine.frequency.setValueAtTime(440, context.currentTime);\r\n\r\n  if (semitones !== undefined) {\r\n    const centsPerSemitone = Math.pow(2, 1/12);\r\n\r\n    square.detune.setValueAtTime(centsPerSemitone * semitones, context.currentTime);\r\n    sawtooth.detune.setValueAtTime(centsPerSemitone * semitones, context.currentTime);\r\n    sine.detune.setValueAtTime(centsPerSemitone * semitones, context.currentTime);\r\n  }\r\n\r\n  return {\r\n    square,\r\n    sawtooth,\r\n    sine\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a batch of gain nodes for specific waveform oscillators.\r\n * @param context The audio context to use.\r\n * @param oscillators The waveform-specific oscillator nodes to use.\r\n * @returns The resulting oscillator-specific gain nodes.\r\n */\r\nfunction createOscillatorGains(context: AudioContext, oscillators: WaveformNodes<OscillatorNode>): WaveformNodes<GainNode> {\r\n  const square = new GainNode(context);\r\n  const sawtooth = new GainNode(context);\r\n  const sine = new GainNode(context);\r\n\r\n  // Set the gain\r\n  square.gain.setValueAtTime(1, context.currentTime);\r\n  sawtooth.gain.setValueAtTime(1, context.currentTime);\r\n  sine.gain.setValueAtTime(1, context.currentTime);\r\n\r\n  // Wire the oscillators up to the corresponding gain nodes\r\n  oscillators.square.connect(square);\r\n  oscillators.sawtooth.connect(sawtooth);\r\n  oscillators.sine.connect(sine);\r\n\r\n  return {\r\n    square,\r\n    sawtooth,\r\n    sine\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a merger for a collection of oscillator-specific gain nodes.\r\n * @param context The audio context to use.\r\n * @param oscillatorGains The oscillator-specific gain nodes to use.\r\n * @returns The resulting channel merger.\r\n */\r\nfunction createOscillatorsMixer(context: AudioContext, oscillatorGains: WaveformNodes<GainNode>): ChannelMergerNode {\r\n  const merger = new ChannelMergerNode(context, { numberOfInputs: 3, channelCount: 1 });\r\n\r\n  // Wire the gain nodes for the oscillators into the merger\r\n  oscillatorGains.square.connect(merger);\r\n  oscillatorGains.sawtooth.connect(merger);\r\n  oscillatorGains.sine.connect(merger);\r\n\r\n  return merger;\r\n}\r\n\r\n/**\r\n * Creates an oscillator structure for one output frequency, culminating in a final gain node.\r\n * @param context The audio context to use.\r\n * @param semitones The number of semitones to detune the oscillators by. Optional.\r\n * @returns The resulting oscillator structure.\r\n */\r\nfunction createOscillatorStructure(context: AudioContext, semitones: number | undefined = undefined): FrequencyOscillatorChain {\r\n  const oscillators = createOscillators(context, semitones);\r\n  const oscillatorGains = createOscillatorGains(context, oscillators);\r\n  const oscillatorsMixer = createOscillatorsMixer(context, oscillatorGains);\r\n\r\n  const output = new GainNode(context);\r\n  oscillatorsMixer.connect(output);\r\n\r\n  return {\r\n    oscillators,\r\n    oscillatorGains,\r\n    output\r\n  };\r\n}\r\n\r\n/**\r\n * Creates an LFO structure, culminating in a final gain node that can be used to modulate the output.\r\n * @param context The audio context to use.\r\n * @param frequency The frequency to use for the LFO.\r\n * @param gain The gain to use for the variable portion of the LFO.\r\n * @returns The resulting LFO chain.\r\n */\r\nfunction createLfoStructure(context: AudioContext, frequency: number, gain: number): LfoChain {\r\n  // Start with the oscillator\r\n  const oscillator = new OscillatorNode(context, { type: 'sine' });\r\n  oscillator.frequency.setValueAtTime(frequency, context.currentTime);\r\n\r\n  // Feed that into a variable gain node for when the LFO is \"on\"\r\n  const oscillatorGain = new GainNode(context);\r\n  oscillator.connect(oscillatorGain);\r\n\r\n  // Create a constant gain node for when the LFO is \"off\"\r\n  const constantSource = new ConstantSourceNode(context);\r\n  const constantGain = new GainNode(context);\r\n  constantSource.connect(constantGain);\r\n\r\n  // Combine the on/off channels\r\n  const gainMixer = new ChannelMergerNode(context, { numberOfInputs: 2, channelCount: 1 });\r\n  oscillatorGain.connect(gainMixer);\r\n  constantGain.connect(gainMixer);\r\n\r\n  // Connect the the mixed LFO output to the final output node\r\n  const lfoOutput = new GainNode(context);\r\n  gainMixer.connect(lfoOutput.gain);\r\n\r\n  // Make sure the wet/dry balance is configured\r\n  setWetDryBalance(oscillatorGain, constantGain, gain, context.currentTime);\r\n\r\n  return {\r\n    oscillator,\r\n    oscillatorGain,\r\n    constantGain,\r\n    lfoOutput\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a reverb structure that supports variable gain.\r\n * @param context The audio context to use.\r\n * @param gain The gain to use for the reverb.\r\n * @param input The incoming audio to reverb.\r\n * @returns The resulting reverb chain.\r\n */\r\nfunction createReverbStructure(context: AudioContext, gain: number, input: AudioNode): ReverbChain {\r\n  // Create a reverb node - the buffer will be set up later\r\n  const reverbConvolver = new ConvolverNode(context);\r\n\r\n  // Create a gain node for when reverb is being used\r\n  const wetGain = new GainNode(context);\r\n  reverbConvolver.connect(wetGain);\r\n\r\n  // Create a gain node for when reverb is *not* being used\r\n  const dryGain = new GainNode(context);\r\n\r\n  // Combine the reverb nodes in a mixer\r\n  const reverbOutput = new ChannelMergerNode(context, { numberOfInputs: 2, channelCount: 1});\r\n  wetGain.connect(reverbOutput);\r\n  dryGain.connect(reverbOutput);\r\n\r\n  // Ensure the input node feeds into both the convolver and the \"dry\" gain\r\n  input.connect(reverbConvolver);\r\n  input.connect(dryGain);\r\n\r\n  // Make sure the wet/dry balance is configured\r\n  setWetDryBalance(wetGain, dryGain, gain, context.currentTime);\r\n\r\n  return {\r\n    reverbConvolver,\r\n    wetGain,\r\n    dryGain,\r\n    reverbOutput\r\n  }\r\n}\r\n\r\n/**\r\n * Starts all oscillator nodes in the provided chains.\r\n * @param chains The chains containing the oscillator nodes.\r\n */\r\nfunction startOscillators(...chains: (FrequencyOscillatorChain | null)[]): void {\r\n  for (let chain of chains) {\r\n    // Skip over nulls\r\n    if (chain === null) {\r\n      continue;\r\n    }\r\n\r\n    chain.oscillators.square.start();\r\n    chain.oscillators.sawtooth.start();\r\n    chain.oscillators.sine.start();\r\n  }\r\n}\r\n\r\n/**\r\n * Assigns a periodic wave to all oscillator nodes of a particular type.\r\n * @param context The audio context to use.\r\n * @param wavetableJson The JSON for the wavetable.\r\n * @param type The type of oscillator nodes to update.\r\n * @param chains The chains containing the oscillator nodes.\r\n */\r\nfunction assignWaveformTable(context: AudioContext | null, wavetableJson: any, type: 'square' | 'sawtooth' | 'sine', ...chains: (FrequencyOscillatorChain | null)[]): void {\r\n  // Make sure we have a context\r\n  if (context === null) {\r\n    return;\r\n  }\r\n\r\n  // Make sure we have JSON\r\n  if (!wavetableJson || !Array.isArray(wavetableJson['real']) || !Array.isArray(wavetableJson['imag'])) {\r\n    return;\r\n  }\r\n\r\n  // Build the wavetable from the specified JSON\r\n  const wave = new PeriodicWave(context, { real: wavetableJson['real'], imag: wavetableJson['imag'] });\r\n\r\n  for (let chain of chains) {\r\n    // Skip over nulls\r\n    if (chain === null) {\r\n      continue;\r\n    }\r\n\r\n    switch (type) {\r\n      case 'square':\r\n        chain.oscillators.square.setPeriodicWave(wave);\r\n        break;\r\n\r\n      case 'sawtooth':\r\n        chain.oscillators.sawtooth.setPeriodicWave(wave);\r\n        break;\r\n\r\n      case 'sine':\r\n        chain.oscillators.sine.setPeriodicWave(wave);\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Updates all oscillator nodes in the provided chains to use the specified frequency.\r\n * @param frequency The frequency to use.\r\n * @param atTime The time at which to assign the frequency.\r\n * @param chains The chains containing the oscillator nodes to update.\r\n */\r\nfunction assignWaveformFrequency(frequency: number, atTime: number, ...chains: (FrequencyOscillatorChain | null)[]): void {\r\n  for (let chain of chains) {\r\n    // Skip over nulls\r\n    if (chain === null) {\r\n      continue;\r\n    }\r\n\r\n    chain.oscillators.square.frequency.setValueAtTime(frequency, atTime);\r\n    chain.oscillators.sawtooth.frequency.setValueAtTime(frequency, atTime);\r\n    chain.oscillators.sine.frequency.setValueAtTime(frequency, atTime);\r\n  }\r\n}\r\n\r\n/**\r\n * Updates all waveform-specific gain nodes in the provided chains to use the indicated waveform-specific gain levels.\r\n * @param square The gain level to use for square waveforms.\r\n * @param sawtooth The gain level to use for sawtooth waveforms.\r\n * @param sine The gain level to use for sine waveforms.\r\n * @param atTime The time at which to assign the gain levels.\r\n * @param chains The chains containing the oscillator nodes to update.\r\n */\r\nfunction assignWaveformGains(square: number, sawtooth: number, sine: number, atTime: number, ...chains: (FrequencyOscillatorChain | null)[]): void {\r\n  for (let chain of chains) {\r\n    // Skip over nulls\r\n    if (chain === null) {\r\n      continue;\r\n    }\r\n\r\n    chain.oscillatorGains.square.gain.setValueAtTime(square, atTime);\r\n    chain.oscillatorGains.sawtooth.gain.setValueAtTime(sawtooth, atTime);\r\n    chain.oscillatorGains.sine.gain.setValueAtTime(sine, atTime);\r\n  }\r\n}\r\n\r\n/**\r\n * Updates the provided pair of wet/dry gain nodes to reflect the specified \"wet\" gain.\r\n * @param wetNode The gain node controlling the \"wet\" processed signal.\r\n * @param dryNode The gain node controlling the \"dry\" unprocessed signal.\r\n * @param wetGain The amount of gain to apply to the \"wet\" signal, on a 0.0-1.0 scale.\r\n * @param atTime The time at which to assign the gain levels.\r\n */\r\nfunction setWetDryBalance(wetNode: GainNode, dryNode: GainNode, wetGain: number, atTime: number) {\r\n  wetNode.gain.setValueAtTime(wetGain, atTime);\r\n  dryNode.gain.setValueAtTime(1.0 - wetGain, atTime);\r\n}\r\n\r\nexport class SoundManager {\r\n\r\n  constructor(\r\n    private hue: number,\r\n    private saturation: number,\r\n    private lightness: number\r\n  ) {\r\n    // No body necessary\r\n  } \r\n\r\n  /**\r\n   * Tracks whether the overall audio processing structure has been initialized.\r\n   */\r\n  private structureInitialized: boolean = false;\r\n\r\n  /**\r\n   * The audio context to use.\r\n   */\r\n  private audioContext: AudioContext | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the base frequency.\r\n   */\r\n  private baseFrequencyChain: FrequencyOscillatorChain | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the major third frequency.\r\n   */\r\n  private thirdFrequencyChain: FrequencyOscillatorChain | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the perfect fifth frequency.\r\n   */\r\n  private fifthFrequencyChain: FrequencyOscillatorChain | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the LFO effect.\r\n   */\r\n  private lfoChain: LfoChain | null = null;\r\n\r\n  /**\r\n   * The node chain to use for the reverb effect.\r\n   */\r\n  private reverbChain: ReverbChain | null = null;\r\n\r\n  /**\r\n   * The frequency that is used for the output volume.\r\n   */\r\n  private lfoFrequency: number = 15; // XXX: See if this can be better consolidated with the SoundInterface UI default\r\n\r\n  /**\r\n   * The gain level that is used for the LFO \"on\" gain node.\r\n   * The LFO \"off\" gain node is 1.0 minus this value.\r\n   */\r\n  private lfoGain: number = 0.25; // XXX: See if this can be better consolidated with the SoundInterface UI default\r\n \r\n   /**\r\n    * The gain level that is used for the reverb \"on\" gain node.\r\n    * The reverb \"off\" gain node is 1.0 minus this value.\r\n    */\r\n   private reverbGain: number = 0.0; // XXX: See if this can be better consolidated with the SoundInterface UI default\r\n\r\n  /**\r\n   * The final gain node that is used to control output volume.\r\n   */\r\n  private overallVolumeGainNode: GainNode | null = null;\r\n\r\n  /**\r\n   * The gain level that is used for the output volume.\r\n   */\r\n  private overallVolumeGain: number = 0.1; // XXX: See if this can be better consolidated with the SoundInterface UI default\r\n\r\n  private initializeAudioStructure(): void {\r\n    // Don't do this more than once\r\n    if (this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    if (this.audioContext === null) {\r\n      this.audioContext = new AudioContext();\r\n    }\r\n\r\n    // Set up the frequency chains\r\n    this.baseFrequencyChain = createOscillatorStructure(this.audioContext);\r\n    this.thirdFrequencyChain = createOscillatorStructure(this.audioContext, 4);\r\n    this.fifthFrequencyChain = createOscillatorStructure(this.audioContext, 7);\r\n\r\n    // Create an overall mixer between the various frequency chains\r\n    const chainsMixer = new ChannelMergerNode(this.audioContext, { numberOfInputs: 3, channelCount: 1 });\r\n    this.baseFrequencyChain.output.connect(chainsMixer);\r\n    this.thirdFrequencyChain.output.connect(chainsMixer);\r\n    this.fifthFrequencyChain.output.connect(chainsMixer);\r\n\r\n    // Create the LFO chain and ensure the mixed frequency chains funnel into it\r\n    this.lfoChain = createLfoStructure(this.audioContext, this.lfoFrequency, this.lfoGain);\r\n    chainsMixer.connect(this.lfoChain.lfoOutput);\r\n\r\n    // Feed the LFO output into the reverb structure\r\n    this.reverbChain = createReverbStructure(this.audioContext, this.reverbGain, this.lfoChain.lfoOutput);\r\n\r\n    // Create an overall gain node so that we can control final volume\r\n    this.overallVolumeGainNode = new GainNode(this.audioContext);\r\n    this.overallVolumeGainNode.gain.setValueAtTime(this.overallVolumeGain, this.audioContext.currentTime);\r\n\r\n    this.reverbChain.reverbOutput.connect(this.overallVolumeGainNode);\r\n    this.overallVolumeGainNode.connect(this.audioContext.destination);\r\n\r\n    // We're done!\r\n    this.structureInitialized = true;\r\n\r\n    // Switch oscillators over to use wavetables\r\n    fetch(process.env.PUBLIC_URL + '/assets/google/wavetable_08_Warm_Square')\r\n      .then((response) => response.json())\r\n      .then((tableJson) => {\r\n        assignWaveformTable(this.audioContext, tableJson, 'square', this.baseFrequencyChain, this.thirdFrequencyChain, this.fifthFrequencyChain);\r\n      })\r\n      .catch((reason) => {\r\n        console.error('error retrieving square wavetable', reason);\r\n      });\r\n\r\n    fetch(process.env.PUBLIC_URL + '/assets/google/wavetable_06_Warm_Saw')\r\n      .then((response) => response.json())\r\n      .then((tableJson) => {\r\n        assignWaveformTable(this.audioContext, tableJson, 'sawtooth', this.baseFrequencyChain, this.thirdFrequencyChain, this.fifthFrequencyChain);\r\n      })\r\n      .catch((reason) => {\r\n        console.error('error retrieving saw wavetable', reason);\r\n      });\r\n\r\n    fetch(process.env.PUBLIC_URL + '/assets/google/wavetable_Celeste')\r\n      .then((response) => response.json())\r\n      .then((tableJson) => {\r\n        assignWaveformTable(this.audioContext, tableJson, 'sine', this.baseFrequencyChain, this.thirdFrequencyChain, this.fifthFrequencyChain);\r\n      })\r\n      .catch((reason) => {\r\n        console.error('error retrieving sine wavetable', reason);\r\n      });\r\n\r\n    // Ensure that we have an impulse response for the reverb\r\n    fetch(process.env.PUBLIC_URL + '/assets/google/impulse-responses_matrix-reverb6.wav')\r\n      .then((response) => response.arrayBuffer())\r\n      .then((buffer) => this.audioContext!.decodeAudioData(buffer))\r\n      .then((audioData) => {\r\n        if (this.reverbChain) {\r\n          console.debug('reverb chain initialized');\r\n          this.reverbChain.reverbConvolver.buffer = audioData;\r\n        }\r\n      })\r\n      .catch((reason) => {\r\n        console.error('error retrieving reverb data', reason);\r\n      });\r\n  }\r\n\r\n  private cascadeHueToAudioNodes(): void {\r\n    // Don't do anything if we don't have an audio context yet\r\n    if (this.audioContext === null) {\r\n      return;\r\n    }\r\n\r\n    const SCALE_UP: [number, number] = [0.0, 1.0];\r\n    const SCALE_DOWN: [number, number] = [1.0, 0.0];\r\n    const PURE_RED = 0;\r\n    const PURE_YELLOW = 60;\r\n    const PURE_GREEN = 120;\r\n    const PURE_CYAN = 180;\r\n    const PURE_BLUE = 240;\r\n    const PURE_MAGENTA = 300;\r\n    const PURE_RED_WRAP = 360;\r\n\r\n    let redSquareComponent = 0;\r\n    let blueSineComponent = 0;\r\n    let greenSawComponent = 0;\r\n\r\n    // If this is perfectly divisible by 120, we're 100% in either red/green/blue.\r\n    // Similarly, if we're otherwise divisible by 60, we're at a 50/50 blend.\r\n    if (this.hue % 120 === 0) {\r\n      switch (this.hue) {\r\n        case PURE_GREEN:\r\n          greenSawComponent = 1;\r\n          break;\r\n\r\n        case PURE_BLUE:\r\n          blueSineComponent = 1;\r\n          break;\r\n\r\n        case PURE_RED:\r\n        case PURE_RED_WRAP:\r\n          redSquareComponent = 1;\r\n          break;\r\n      }\r\n    }\r\n    else if (this.hue % 60 === 0) {\r\n      switch (this.hue) {\r\n        case PURE_YELLOW:\r\n          redSquareComponent = 0.5;\r\n          greenSawComponent = 0.5;\r\n          break;\r\n\r\n        case PURE_CYAN:\r\n          greenSawComponent = 0.5;\r\n          blueSineComponent = 0.5;\r\n          break;\r\n\r\n        case PURE_MAGENTA:\r\n          blueSineComponent = 0.5;\r\n          redSquareComponent = 0.5;\r\n          break;\r\n      }\r\n    }\r\n    else {\r\n      // It's time to do this the hard way.\r\n      if (this.hue < PURE_GREEN) {\r\n        // Scale down from pure red and up to pure green\r\n        redSquareComponent = scaleNumericValue(this.hue, [PURE_RED, PURE_GREEN], SCALE_DOWN);\r\n        greenSawComponent = scaleNumericValue(this.hue, [PURE_RED, PURE_GREEN], SCALE_UP);\r\n      }\r\n      else if (this.hue < PURE_BLUE) {\r\n        // Scale down from pure green and up to pure blue\r\n        greenSawComponent = scaleNumericValue(this.hue, [PURE_GREEN, PURE_BLUE], SCALE_DOWN);\r\n        blueSineComponent = scaleNumericValue(this.hue, [PURE_GREEN, PURE_BLUE], SCALE_UP);\r\n      }\r\n      else if (this.hue < PURE_RED_WRAP) {\r\n        // Scale down from pure blue and up to pure red\r\n        blueSineComponent = scaleNumericValue(this.hue, [PURE_BLUE, PURE_RED_WRAP], SCALE_DOWN);\r\n        redSquareComponent = scaleNumericValue(this.hue, [PURE_BLUE, PURE_RED_WRAP], SCALE_UP);\r\n      }\r\n    }\r\n\r\n    // Cascade the components to the relevant nodes\r\n    assignWaveformGains(\r\n      redSquareComponent,\r\n      greenSawComponent,\r\n      blueSineComponent,\r\n      this.audioContext!.currentTime,\r\n      this.baseFrequencyChain,\r\n      this.thirdFrequencyChain,\r\n      this.fifthFrequencyChain);\r\n  }\r\n\r\n  private cascadeSaturationToAudioNodes(): void {\r\n    // Don't do anything if we don't have an audio context yet\r\n    if (this.audioContext === null) {\r\n      return;\r\n    }\r\n\r\n    // Apply the saturation as a gain value to all chord nodes\r\n    const chordGains = clamp(this.saturation, 0, 100) / 100.0;\r\n\r\n    this.thirdFrequencyChain?.output.gain.setValueAtTime(chordGains, this.audioContext!.currentTime);\r\n    this.fifthFrequencyChain?.output.gain.setValueAtTime(chordGains, this.audioContext!.currentTime);\r\n  }\r\n\r\n  private cascadeLightnessToAudioNodes(): void {\r\n    // Don't do anything if we don't have an audio context yet\r\n    if (this.audioContext === null) {\r\n      return;\r\n    }\r\n\r\n    // Apply the frequency value to all oscillator nodes\r\n    // Use a 2%-per-semitone scale to avoid the really aggravating frequencies\r\n    const semitoneDistance = scaleNumericValue(clamp(this.lightness, 0, 100), [0, 100], [-25, 25]);\r\n    const frequency = Math.pow(2, semitoneDistance/12) * 440;\r\n\r\n    assignWaveformFrequency(\r\n      frequency,\r\n      this.audioContext!.currentTime,\r\n      this.baseFrequencyChain,\r\n      this.thirdFrequencyChain,\r\n      this.fifthFrequencyChain);\r\n  }\r\n\r\n  /**\r\n   * Begins playing audio.\r\n   */\r\n  public play(): void {\r\n    if (this.audioContext === null) {\r\n      this.audioContext = new AudioContext();\r\n      this.initializeAudioStructure();\r\n\r\n      this.cascadeHueToAudioNodes();\r\n      this.cascadeLightnessToAudioNodes();\r\n      this.cascadeSaturationToAudioNodes();\r\n\r\n      // Start all of the oscillators in the frequency chain\r\n      startOscillators(this.baseFrequencyChain, this.thirdFrequencyChain, this.fifthFrequencyChain);\r\n\r\n      // Ensure the LFO chain is also initialized\r\n      if (this.lfoChain !== null) {\r\n        this.lfoChain.oscillator.start();\r\n      }\r\n    }\r\n\r\n    this.audioContext.resume();\r\n  }\r\n\r\n  /**\r\n   * Pauses playing audio.\r\n   */\r\n  public pause(): void {\r\n    if (this.audioContext !== null) {\r\n      this.audioContext.suspend();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the audio qualities based on the provided hue.\r\n   * @param hue The hue to use.\r\n   */\r\n  public changeHue(hue: number): void {\r\n    this.hue = hue % 360;\r\n    this.cascadeHueToAudioNodes();\r\n  }\r\n\r\n  /**\r\n   * Updates the audio qualities based on the provided saturation.\r\n   * @param saturation The saturation to use.\r\n   */\r\n  public changeSaturation(saturation: number): void {\r\n    this.saturation = saturation;\r\n    this.cascadeSaturationToAudioNodes();\r\n  }\r\n\r\n  /**\r\n   * Updates the audio qualities based on the provided lightness.\r\n   * @param lightness The lightness to use.\r\n   */\r\n  public changeLightness(lightness: number): void {\r\n    this.lightness = lightness;\r\n    this.cascadeLightnessToAudioNodes();\r\n  }\r\n\r\n  /**\r\n   * Changes the audio volume.\r\n   * @param volume The new output volume, on a 0.0-1.0 scale.\r\n   */\r\n  public changeVolume(volume: number): void {\r\n    this.overallVolumeGain = clamp(volume, 0.0, 1.0);\r\n\r\n    // Don't do anything else if we don't have audio in place yet\r\n    if (this.audioContext === null || this.overallVolumeGainNode === null || !this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    this.overallVolumeGainNode.gain.setValueAtTime(this.overallVolumeGain, this.audioContext.currentTime);\r\n  }\r\n\r\n  /**\r\n   * Changes the reverb intensity.\r\n   * @param intensity The reverb intensity, on a 0.0-1.0 scale.\r\n   */\r\n   public changeReverbIntensity(intensity: number) {\r\n    this.reverbGain = clamp(intensity, 0.0, 1.0);\r\n\r\n    // Don't do anything else if we don't have audio in place yet\r\n    if (this.audioContext === null || this.reverbChain === null || !this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    setWetDryBalance(this.reverbChain.wetGain, this.reverbChain.dryGain, this.reverbGain, this.audioContext.currentTime);\r\n  }\r\n\r\n  /**\r\n   * Changes the LFO intensity.\r\n   * @param intensity The LFO intensity, on a 0.0-1.0 scale.\r\n   */\r\n  public changeLfoIntensity(intensity: number) {\r\n    this.lfoGain = clamp(intensity, 0.0, 1.0);\r\n\r\n    // Don't do anything else if we don't have audio in place yet\r\n    if (this.audioContext === null || this.lfoChain === null || !this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    setWetDryBalance(this.lfoChain.oscillatorGain, this.lfoChain.constantGain, this.lfoGain, this.audioContext.currentTime);\r\n  }\r\n\r\n  /**\r\n   * Changes the LFO frequency.\r\n   * @param frequency The LFO frequency, on a 1-30 Hz scale.\r\n   */\r\n  public changeLfoFrequency(frequency: number) {\r\n    this.lfoFrequency = clamp(frequency, 1, 30);\r\n\r\n    // Don't do anything else if we don't have audio in place yet\r\n    if (this.audioContext === null || this.lfoChain === null || !this.structureInitialized) {\r\n      return;\r\n    }\r\n\r\n    this.lfoChain.oscillator.frequency.setValueAtTime(this.lfoFrequency, this.audioContext.currentTime);\r\n  }\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useAppSelector } from \"../hooks\";\r\n\r\nimport './SoundInterface.css';\r\nimport { SoundManager } from \"../soundManager\";\r\n\r\nfunction SoundInterface(): JSX.Element {\r\n  const mainHue = useAppSelector((state) => state.color.hue);\r\n  const mainSaturation = useAppSelector((state) => state.color.saturation);\r\n  const mainLightness = useAppSelector((state) => state.color.lightness);\r\n  const soundManager = useRef(new SoundManager(mainHue, mainSaturation, mainLightness));\r\n\r\n  const [isInterfaceExpanded, setInterfaceExpanded] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentVolume, setCurrentVolume] = useState(10);\r\n  const [currentReverbIntensity, setCurrentReverbIntensity] = useState(0);\r\n  const [currentLfoIntensity, setCurrentLfoIntensity] = useState(25);\r\n  const [currentLfoFrequency, setCurrentLfoFrequency] = useState(15);\r\n\r\n  // Cascade color changes to the sound manager\r\n  useEffect(() => {\r\n    soundManager.current.changeHue(mainHue);\r\n  }, [mainHue]);\r\n\r\n  useEffect(() => {\r\n    soundManager.current.changeSaturation(mainSaturation);\r\n  }, [mainSaturation]);\r\n\r\n  useEffect(() => {\r\n    soundManager.current.changeLightness(mainLightness);\r\n  }, [mainLightness]);\r\n\r\n  // Prevent mousedown/touchstart events in this area from starting panning\r\n  const panInterceptor = (event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>): void => {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  const panelButtonClicked = (event: React.MouseEvent<HTMLButtonElement>): boolean => {\r\n    setInterfaceExpanded(!isInterfaceExpanded);\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    return false;\r\n  }\r\n\r\n  const playButtonClicked = (event: React.MouseEvent<HTMLButtonElement>): boolean => {\r\n    if (isPlaying) {\r\n      soundManager.current.pause();\r\n    }\r\n    else {\r\n      soundManager.current.play();\r\n    }\r\n\r\n    setIsPlaying(!isPlaying);\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    return false;\r\n  };\r\n\r\n  const volumeSliderChanged = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    const wholeVolume = parseInt((event.target as HTMLInputElement).value, 10);\r\n\r\n    setCurrentVolume(wholeVolume)\r\n    soundManager.current.changeVolume(wholeVolume / 100);\r\n  };\r\n\r\n  const reverbIntensityChanged = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    const wholeIntensity = parseInt((event.target as HTMLInputElement).value, 10);\r\n\r\n    setCurrentReverbIntensity(wholeIntensity)\r\n    soundManager.current.changeReverbIntensity(wholeIntensity / 100);\r\n  };\r\n\r\n  const lfoIntensityChanged = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    const wholeIntensity = parseInt((event.target as HTMLInputElement).value, 10);\r\n\r\n    setCurrentLfoIntensity(wholeIntensity)\r\n    soundManager.current.changeLfoIntensity(wholeIntensity / 100);\r\n  };\r\n\r\n  const lfoFrequencyChanged = (event: React.FormEvent<HTMLInputElement>): void => {\r\n    const wholeFrequency = parseInt((event.target as HTMLInputElement).value, 10);\r\n\r\n    setCurrentLfoFrequency(wholeFrequency)\r\n    soundManager.current.changeLfoFrequency(wholeFrequency);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      id=\"audioPanel\"\r\n      className={mainLightness <= 30 ? 'dark-contrast' : 'light-contrast'}\r\n      onMouseDown={panInterceptor}\r\n      onTouchStart={panInterceptor}\r\n    >     \r\n      {/* We want the audio toggle to always be visible, but play/pause can be hidden. */}\r\n      <div\r\n        className=\"settingBlock\"\r\n      >\r\n        {isInterfaceExpanded &&\r\n          <button\r\n            type=\"button\"\r\n            onClick={playButtonClicked}\r\n          >\r\n            <svg\r\n              className=\"feather\">\r\n              <use href={process.env.PUBLIC_URL + '/assets/feather/feather-sprite.svg#' + ((isPlaying) ? 'pause' : 'play')} />\r\n            </svg>\r\n            {isPlaying ? \"Pause\" : \"Play\"}\r\n          </button>\r\n        }\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={panelButtonClicked}\r\n        >\r\n          <svg\r\n            className=\"feather\">\r\n            <use href={process.env.PUBLIC_URL + '/assets/feather/feather-sprite.svg#' + ((isInterfaceExpanded) ? 'minimize-2' : 'maximize-2')} />\r\n          </svg>\r\n          {isInterfaceExpanded ? \"Hide Audio\" : \"Show Audio\"}\r\n        </button>\r\n      </div>\r\n      {/* Start collapsible settings block */}\r\n      {isInterfaceExpanded &&\r\n      <div>\r\n        <div\r\n          className=\"settingBlock\"\r\n        >\r\n          <label htmlFor=\"audioVolume\">\r\n            Volume\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"audioVolume\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            step=\"1\"\r\n            value={currentVolume}\r\n            onInput={volumeSliderChanged}\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"settingBlock\"\r\n        >\r\n          <label htmlFor=\"audioReverb\">\r\n            Reverb\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"audioReverb\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            step=\"1\"\r\n            value={currentReverbIntensity}\r\n            onInput={reverbIntensityChanged}\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"settingBlock\"\r\n        >\r\n          <label htmlFor=\"audioLfoIntensity\">\r\n            LFO Intensity\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"audioLfoIntensity\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            step=\"1\"\r\n            value={currentLfoIntensity}\r\n            onInput={lfoIntensityChanged}\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"settingBlock\"\r\n        >\r\n          <label htmlFor=\"audioLfoFrequency\">\r\n            LFO Frequency\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"audioLfoFrequency\"\r\n            min=\"1\"\r\n            max=\"30\"\r\n            step=\"1\"\r\n            value={currentLfoFrequency}\r\n            onInput={lfoFrequencyChanged}\r\n          />\r\n        </div>\r\n      </div>}\r\n      {/* End of collapsible settings block */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SoundInterface;\r\n","import { useEffect } from 'react';\r\n\r\nimport { useAppSelector } from '../hooks';\r\n\r\nfunction ColorChangeHandler(): null {\r\n  const mainHue = useAppSelector((state) => state.color.hue);\r\n  const mainSaturation = useAppSelector((state) => state.color.saturation);\r\n  const mainLightness = useAppSelector((state) => state.color.lightness);\r\n\r\n  useEffect(() => {\r\n    // Convert the color into the equivalent HSL CSS declaration\r\n    const colorString = `hsl(${mainHue}, ${mainSaturation}%, ${mainLightness}%)`;\r\n\r\n    // Update the theme-color meta tag to match our main color\r\n    document.querySelector('meta[name=\"theme-color\"]')?.setAttribute('content', colorString);\r\n\r\n    // Create a dummy canvas\r\n    const canvasElem = document.createElement('canvas') as HTMLCanvasElement;\r\n    canvasElem.setAttribute('width', '64px');\r\n    canvasElem.setAttribute('height', '64px');\r\n\r\n    // Try to get a 2D rendering context\r\n    const ctx = canvasElem.getContext('2d', { alpha: true, desynchronized: true });\r\n    \r\n    if (ctx) {\r\n      // Draw a hexagon with the color\r\n      const region = new Path2D();\r\n      region.moveTo(16, 8);\r\n      region.lineTo(48, 8);\r\n      region.lineTo(60, 32);\r\n      region.lineTo(48, 56);\r\n      region.lineTo(16, 56);\r\n      region.lineTo(4, 32);\r\n      region.closePath();\r\n\r\n      ctx.fillStyle = colorString;\r\n      ctx.fill(region);\r\n\r\n      // Convert to a data URL and use it to generate the favicon\r\n      const iconUrl = canvasElem.toDataURL('image/png');\r\n      document.querySelector('link[rel=\"icon\"]')?.setAttribute('href', iconUrl);\r\n    }\r\n\r\n    canvasElem.remove();\r\n  }, [mainHue, mainSaturation, mainLightness]);\r\n\r\n  return null;\r\n}\r\n\r\nexport default ColorChangeHandler;\r\n","import { useAppSelector } from \"../hooks\";\r\n\r\nfunction DragGuideIcon(): JSX.Element {\r\n  const baseHue = useAppSelector((state) => state.color.hue);\r\n\r\n  return (\r\n    <svg\r\n      viewBox=\"0 0 512 512\"\r\n    >\r\n      <path\r\n        d=\"M140.554,342.052L156.154,369.072L90.585,351.503L108.154,285.933L123.754,312.953L373.169,168.953L357.569,141.933L423.138,159.503L405.569,225.072L389.969,198.052L140.554,342.052Z\"\r\n        fill=\"url(#_Lightness)\"\r\n      />\r\n      <path\r\n        d=\"M239.2,112L208,112L256,64L304,112L272.8,112L272.8,400L304,400L256,448L208,400L239.2,400L239.2,112Z\"\r\n        fill=\"url(#_Saturation)\"\r\n      />\r\n      <path\r\n        d=\"M126.108,200.406L110.508,227.426L92.939,161.856L158.508,144.287L142.908,171.307L392.323,315.307L407.923,288.287L425.492,353.856L359.923,371.426L375.523,344.406L126.108,200.406Z\"\r\n        fill=\"url(#_Hue)\"\r\n      />\r\n      <defs>\r\n        <linearGradient\r\n          id=\"_Lightness\"\r\n          x1=\"0\"\r\n          y1=\"0\"\r\n          x2=\"1\"\r\n          y2=\"0\"\r\n          gradientTransform=\"rotate(-30 0.5 0.5)\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            style={{\"stopColor\": `hsl(${baseHue},70%,0%)`}}\r\n          />\r\n          <stop\r\n            offset=\"0.5\"\r\n            style={{\"stopColor\": `hsl(${baseHue},70%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            style={{\"stopColor\": `hsl(${baseHue},70%,100%)`}}\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"_Hue\"\r\n          x1=\"1\" \r\n          y1=\"0\" \r\n          x2=\"0\" \r\n          y2=\"0\" \r\n          gradientTransform=\"rotate(30 0.5 0.5)\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            style={{\"stopColor\": `hsl(${baseHue - 120},70%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"0.25\"\r\n            style={{\"stopColor\": `hsl(${baseHue - 60},70%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"0.5\"\r\n            style={{\"stopColor\": `hsl(${baseHue},70%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"0.75\"\r\n            style={{\"stopColor\": `hsl(${baseHue + 60},70%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            style={{\"stopColor\": `hsl(${baseHue + 120},70%,50%)`}}\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"_Saturation\"\r\n          x1=\"0\"\r\n          y1=\"0\"\r\n          x2=\"1\"\r\n          y2=\"0\"\r\n          gradientTransform=\"rotate(-90 0.5 0.5)\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            style={{\"stopColor\": `hsl(${baseHue},0%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"0.5\"\r\n            style={{\"stopColor\": `hsl(${baseHue},50%,50%)`}}\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            style={{\"stopColor\": `hsl(${baseHue},100%,50%)`}}\r\n          />\r\n        </linearGradient>\r\n      </defs>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default DragGuideIcon;\r\n","import { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\n\r\nimport './App.css';\r\nimport Grid from './Grid';\r\nimport SoundInterface from \"./SoundInterface\";\r\nimport ColorChangeHandler from './ColorChangeHandler';\r\nimport DragGuideIcon from \"./DragGuideIcon\";\r\nimport DebugDialog from \"./DebugDialog\";\r\n\r\nfunction App(): JSX.Element {\r\n  const dispatch = useAppDispatch();\r\n  const baseHexSize = useAppSelector((state) => state.hexGrid.baseHexSize);\r\n  const [isPanning, setIsPanning] = useState(false);\r\n  const lastPannedClientX = useRef(0);\r\n  const lastPannedClientY = useRef(0);\r\n\r\n  // Ensure that we resize the grid when the window resizes\r\n  useEffect(() => {\r\n    const handleResize = (): void => {\r\n      setIsPanning(false);\r\n      dispatch({ type: 'hexGrid/resize' });\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize)\r\n    };\r\n  }, [dispatch]);\r\n  \r\n  // Listen to keyboard events to scale color values\r\n  useEffect(() => {\r\n    const handleKey = (event: KeyboardEvent): void => {\r\n      // Numpad left/right and arrow left/right control hue\r\n      // Numpad up/down and arrow up/down control saturation    \r\n      // Plus and minus control luminance\r\n      const scaleFactor = 1;\r\n  \r\n      switch(event.code) {\r\n        case 'Numpad8':\r\n        case 'ArrowUp':\r\n          dispatch({ type: 'color/adjustSaturation', payload: scaleFactor });\r\n          break;\r\n  \r\n        case 'Numpad2':\r\n        case 'ArrowDown':\r\n          dispatch({ type: 'color/adjustSaturation', payload: -scaleFactor });\r\n          break;\r\n  \r\n        case 'Numpad6':\r\n        case 'ArrowRight':\r\n          dispatch({ type: 'color/adjustHue', payload: scaleFactor });\r\n          break;\r\n  \r\n        case 'Numpad4':\r\n        case 'ArrowLeft':\r\n          dispatch({ type: 'color/adjustHue', payload: -scaleFactor });\r\n          break;\r\n  \r\n        case 'NumpadAdd':\r\n        case 'Equal':\r\n          dispatch({ type: 'color/adjustLightness', payload: scaleFactor });\r\n          break;\r\n  \r\n        case 'NumpadSubtract':\r\n        case 'Minus':\r\n          dispatch({ type: 'color/adjustLightness', payload: -scaleFactor });\r\n          break;\r\n  \r\n        default:\r\n          // no-op\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKey);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKey)\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // Listen to when we start panning and store the initial coordinates\r\n  // so we can get relative values\r\n  useEffect(() => {\r\n    const handlePanStart = (event: TouchEvent | MouseEvent): void => {\r\n      // Skip when we're already panning\r\n      // XXX: Investigate whether we can use this to prevent creating the event handler in the first place\r\n      if (isPanning) {\r\n        return;\r\n      }\r\n  \r\n      // Switch based on whether this is a touch or mouse event\r\n      let currentClientX: number;\r\n      let currentClientY: number;\r\n\r\n      if (event.type === 'touchstart') {\r\n        const touchEvent = event as TouchEvent;\r\n  \r\n        // Don't do anything with multi-touch\r\n        if (touchEvent.touches.length !== 1) {\r\n          return;\r\n        }\r\n  \r\n        currentClientX = touchEvent.touches[0].clientX;\r\n        currentClientY = touchEvent.touches[0].clientY;\r\n      }\r\n      else if (event.type === 'mousedown') {\r\n        const mouseEvent = event as MouseEvent;\r\n  \r\n        currentClientX = mouseEvent.clientX;\r\n        currentClientY = mouseEvent.clientY;\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n\r\n      setIsPanning(true);\r\n      lastPannedClientX.current = currentClientX;\r\n      lastPannedClientY.current = currentClientY;\r\n  \r\n      console.log(`pan start: (${currentClientX}, ${currentClientY})`);\r\n    }\r\n\r\n    // Handle both touch/mouse events for panning\r\n    window.addEventListener('touchstart', handlePanStart);\r\n    window.addEventListener('mousedown', handlePanStart);\r\n\r\n    return () => {\r\n      window.removeEventListener('touchstart', handlePanStart);\r\n      window.removeEventListener('mousedown', handlePanStart);\r\n    }\r\n  }, [dispatch, isPanning]);\r\n\r\n  // Add an effect that will start to change colors as we drag far enough\r\n  useEffect(() => {\r\n    const handlePanMove = (event: TouchEvent | MouseEvent): void => {\r\n      // Make sure we're panning\r\n      // XXX: Investigate whether we can use this to prevent creating the event handler in the first place\r\n      if (!isPanning) {\r\n        return;\r\n      }\r\n  \r\n      let currentClientX: number;\r\n      let currentClientY: number;\r\n      let isTouchEvent: boolean;\r\n  \r\n      // Switch based on whether this is a touch or mouse event\r\n      if (event.type === 'touchmove') {\r\n        const touchEvent = event as TouchEvent;\r\n  \r\n        // Don't do anything with multi-touch\r\n        if (touchEvent.touches.length !== 1) {\r\n          return;\r\n        }\r\n  \r\n        isTouchEvent = true;\r\n        currentClientX = touchEvent.touches[0].clientX;\r\n        currentClientY = touchEvent.touches[0].clientY;\r\n      }\r\n      else if (event.type === 'mousemove') {\r\n        const mouseEvent = event as MouseEvent;\r\n        \r\n        isTouchEvent = false;\r\n        currentClientX = mouseEvent.clientX;\r\n        currentClientY = mouseEvent.clientY;\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n  \r\n      // Determine the distance between the click and our \"last panned\" value.\r\n      // If it's larger than our base hex size, we want to shift one of the colors\r\n      const scaleFactor = isTouchEvent ? 10 : 5;\r\n      const distanceX = currentClientX - lastPannedClientX.current;\r\n      const distanceY = currentClientY - lastPannedClientY.current;\r\n      const distanceTotal = Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));\r\n  \r\n      if (distanceTotal >= 2 * baseHexSize) {\r\n        // When calculating atan2, invert the y-distance because HTML coordinates are in reverse\r\n        const atan = Math.atan2(-distanceY / distanceTotal, distanceX / distanceTotal);\r\n        let angle = atan * 180 / Math.PI;\r\n  \r\n        // Normalize the angle to 0-360 to simplify\r\n        if (angle < 0) {\r\n          angle += 360;\r\n        }\r\n  \r\n        console.log(`pan threshold met (angle: ${angle})`);\r\n  \r\n        // Now map the different axes (assuming 6 \"chunks\")\r\n        if (angle <= 60) {\r\n          // Right and up - adjust lightness upward\r\n          dispatch({ type: 'color/adjustLightness', payload: scaleFactor });\r\n        }\r\n        else if (angle <= 120) {\r\n          // Straight up - adjust saturation upward\r\n          dispatch({ type: 'color/adjustSaturation', payload: scaleFactor });\r\n        }\r\n        else if (angle <= 180) {\r\n          // Left and up - adjust hue (but double the scaling factor since hue is a larger range than the percentages)\r\n          dispatch({ type: 'color/adjustHue', payload: scaleFactor * 2 });\r\n        }\r\n        else if (angle <= 240) {\r\n          // Left and down - adjust lightness downward\r\n          dispatch({ type: 'color/adjustLightness', payload: -scaleFactor });\r\n        }\r\n        else if (angle <= 300) {\r\n          // Straight down - adjust saturation downward\r\n          dispatch({ type: 'color/adjustSaturation', payload: -scaleFactor });\r\n        }\r\n        else {\r\n          // Right and down - adjust hue (but double the scaling factor since hue is a larger range than the percentages)\r\n          dispatch({ type: 'color/adjustHue', payload: -scaleFactor * 2 });\r\n        }\r\n  \r\n        // Update our \"last panned\" value\r\n        lastPannedClientX.current = currentClientX;\r\n        lastPannedClientY.current = currentClientY;\r\n\r\n        // Add some minor haptic feedback if this was a touch event\r\n        if (isTouchEvent && 'vibrate' in navigator) {\r\n          navigator.vibrate(40);\r\n        }\r\n      }\r\n\r\n      // Stop trying to scroll or do anything else\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    };\r\n    \r\n    // Handle both touch/mouse events for panning\r\n    window.addEventListener('touchmove', handlePanMove);\r\n    window.addEventListener('mousemove', handlePanMove);\r\n\r\n    return () => {\r\n      window.removeEventListener('touchmove', handlePanMove);\r\n      window.removeEventListener('mousemove', handlePanMove);\r\n    }\r\n  }, [dispatch, baseHexSize, isPanning]);\r\n\r\n  // Add an effect to handle when we want to stop panning\r\n  useEffect(() => {\r\n    const handlePanEnd = (): void => {\r\n      if (isPanning) {\r\n        console.log('pan end');\r\n      }\r\n  \r\n      setIsPanning(false);\r\n    };\r\n\r\n    // Handle both touch/mouse events for panning\r\n    window.addEventListener('touchend', handlePanEnd);\r\n    window.addEventListener('touchcancel', handlePanEnd);\r\n    window.addEventListener('mouseup', handlePanEnd);\r\n\r\n    return () => {\r\n      window.removeEventListener('touchend', handlePanEnd);\r\n      window.removeEventListener('touchcancel', handlePanEnd);\r\n      window.removeEventListener('mouseup', handlePanEnd);\r\n    }\r\n  }, [isPanning]);\r\n\r\n  return (\r\n    <div\r\n      style={{'cursor': isPanning ? 'grabbing' : 'grab'}}\r\n    >\r\n      {/* Because this intercepts touch events, we always want to have it visible. */}\r\n      <div\r\n        className=\"dragOverlay\"\r\n      >\r\n        {isPanning && <DragGuideIcon />}\r\n      </div>\r\n      <Grid />\r\n      <SoundInterface />\r\n      <ColorChangeHandler />\r\n      {/* Only include debugging information in dev builds */\r\n        process.env.NODE_ENV !== 'production'\r\n        &&\r\n        <DebugDialog />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}